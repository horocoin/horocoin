import React, { useState, useEffect } from 'react';
import { Star, Coins, Calendar, Wallet, CheckCircle, Sparkles, Globe } from 'lucide-react';
import { 
  createNetworkConfig, 
  SuiClientProvider, 
  WalletProvider,
  useCurrentAccount,
  useSignAndExecuteTransaction,
  useSuiClient,
  ConnectButton,
  useCurrentWallet
} from '@mysten/dapp-kit';
import { getFullnodeUrl } from '@mysten/sui/client';
import { Transaction } from '@mysten/sui/transactions';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import '@mysten/dapp-kit/dist/index.css';

// Network configuration
const { networkConfig } = createNetworkConfig({
  testnet: { url: getFullnodeUrl('testnet') },
});

const queryClient = new QueryClient();

// Sui configuration - Use environment variables with fallbacks
const PACKAGE_ID = import.meta.env.VITE_PACKAGE_ID;
const TREASURY_ID = import.meta.env.VITE_TREASURY_ID;
const CLAIMS_ID = import.meta.env.VITE_CLAIMS_ID;
const PROGRESS_REGISTRY_ID = import.meta.env.VITE_PROGRESS_REGISTRY_ID;
const ADMIN_CAP_ID = import.meta.env.VITE_ADMIN_CAP_ID;

// Debug: Log the contract addresses
console.log('üîç Contract addresses:', {
  PACKAGE_ID,
  TREASURY_ID, 
  CLAIMS_ID,
  PROGRESS_REGISTRY_ID,
  ADMIN_CAP_ID
});

// Language Support
const LANGUAGES = {
  en: { name: 'English', flag: 'üá∫üá∏' },
  es: { name: 'Espa√±ol', flag: 'üá®üá¥' },
  zh: { name: '‰∏≠Êñá', flag: 'üá®üá≥' },
  'zh-TR': { name: 'ÁπÅÈ´î‰∏≠Êñá', flag: 'üá®üá≥' },
  ru: { name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
  fr: { name: 'Fran√ßais', flag: 'üá´üá∑' },
  pt: { name: 'Portugu√™s', flag: 'üáßüá∑' } 
};

// Translations
const TRANSLATIONS = {
  en: {
    // Main UI
    dailyHoro: `Daily $HORO`,
    chooseZodiacSystem: `Choose Your Zodiac System`,
    chooseWesternZodiac: `Choose Your Western Zodiac Sign`,
    chooseChineseZodiac: `Choose Your Chinese Zodiac Sign`,
    western: `Western`,
    chinese: `Chinese`,
    weeklyProgress: `Weekly Progress`,
    todayVisitRecorded: `‚úì Today's claim recorded!`,
    alreadyClaimedOnChain: `‚úÖ Already claimed today (verified on blockchain)`,
    dailyReading: `Daily Reading`,
    dailyReward: `Daily $HORO Reward`,
    earnDailyHoro: `Earn {amount} $HORO today!`,
    todayRewardEarned: `‚úÖ Today's {amount} $HORO earned!`,
    checkInToday: `Check-in & Earn $HORO`,
    checkingIn: `Earning $HORO...`,
    claiming: `Claiming...`,
    verifyingClaim: `Verifying claim status...`,
    streakBonus: `Streak Bonus`,
    daysStreak: `{days} day streak`,
    baseReward: `Base reward: {amount} $HORO`,
    bonusReward: `Streak bonus: +{amount} $HORO`,
    totalDailyReward: `Total today: {amount} $HORO`,
    blockchainTransaction: `This will create a blockchain transaction and transfer real $HORO tokens to your wallet!`,
    rewardsClaimedTitle: `‚úÖ Rewards Claimed!`,
    rewardsClaimed: `You've already claimed your $HORO tokens this week.`,
    comeBackMonday: `Come back next Monday to start a new week!`,
    connectWalletButton: `Connect Wallet`,
    connectWallet: `Connect your wallet to automatically track your daily visits and claim $HORO rewards!`,
    connectSuietWallet: `Connect Wallet`,
    connectSuietWalletTitle: `Connect Wallet`,
    connectSuietPrompt: `Connect your wallet to automatically track your daily visits and claim $HORO rewards with cryptographic security!`,
    suietWalletSecure: `Secure wallet with message signing`,
    whySuiet: `Why Connect Wallet?`,
    suietBenefitSigning: `Supports cryptographic message signing`,
    suietBenefitSecurity: `Enhanced security for NFT airdrops`,
    suietBenefitFraud: `Prevents check-in fraud`,
    suietBenefitCompatibility: `Best compatibility with $HORO features`,
    dontHaveSuiet: `Don't have wallet?`,
    downloadSuiet: `Download Wallet ‚Üí`,
    useSuietForSigning: `Please use your wallet for secure message signing`,
    autoSigning: `Automatically signing today's visit... ‚ú®`,
    transitioningToZodiac: `Transitioning to zodiac selection...`,
    wallet: `Wallet`,
    
    // Loading States
    connecting: `Connecting...`,
    signing: `Signing...`,
    loading: `Loading...`,
    
    // Testnet Education
    testnetDisclaimer: `üß™ This app uses Sui Testnet`,
    testnetExplainer: `Testnet tokens have no real monetary value. This is a safe environment to learn and earn virtual $HORO tokens!`,
    learnMoreSuiet: `Learn how to install wallet`,
    needHelp: `Need help?`,
    
    // Gas Management
    gasLow: `‚õΩ Low Gas Balance`,
    gasNeeded: `Please add testnet SUI to your wallet for transactions`,
    getFreeGas: `Open Testnet Faucet`,
    gettingGas: `Opening faucet...`,
    gasSuccess: `‚úÖ Free testnet SUI added to your wallet!`,
    gasError: `‚ùå Failed to open faucet. Please visit faucet.testnet.sui.io manually.`,
    gasBalance: `Gas Balance`,
    sufficientGas: `‚úÖ Sufficient gas for transactions`,
    
    // Footer
    about: `About`,
    tokenomics: `Tokenomics`,
    help: `Help`,
    reset: `Reset`,
    
    // Claim Status Messages
    alreadyClaimedToday: `Already Claimed Today!`,
    alreadyClaimedMessage: `You've earned your daily $HORO! Come back tomorrow.`,
    nextClaimAvailable: `Next claim available: Tomorrow`,
    claimTodaysHoro: `üéÅ Claim Today's $HORO`,
    missedDays: `Missed Days`,
    completedDays: `Completed Days`,
    claimedAmountToday: `Claimed {amount} $HORO today!`,
    completed: `Completed`,
    missed: `Missed`,
    available: `Available`,
    future: `Future`,
    
    // Network Status
    connected: `Connected`,
    connectionVerified: `Connection to Sui Testnet verified`,
    refreshStatus: `Refresh Status`,
    
    // Days of the Week
    sunday: `Sun`,
    monday: `Mon`, 
    tuesday: `Tue`,
    wednesday: `Wed`,
    thursday: `Thu`,
    friday: `Fri`,
    saturday: `Sat`,
    
    // Zodiac Signs
    aries: `aries`,
    taurus: `taurus`, 
    gemini: `gemini`,
    cancer: `cancer`,
    leo: `leo`,
    virgo: `virgo`,
    libra: `libra`,
    scorpio: `scorpio`,
    sagittarius: `sagittarius`,
    capricorn: `capricorn`,
    aquarius: `aquarius`,
    pisces: `pisces`,
    
    // Chinese Zodiac
    rat: `rat`,
    ox: `ox`,
    tiger: `tiger`, 
    rabbit: `rabbit`,
    dragon: `dragon`,
    snake: `snake`,
    horse: `horse`,
    goat: `goat`,
    monkey: `monkey`,
    rooster: `rooster`,
    dog: `dog`,
    pig: `pig`,
    
    // Elements
    water: `Water`,
    earth: `Earth`, 
    wood: `Wood`,
    fire: `Fire`,
    metal: `Metal`
  },
  es: {
    // Main UI
    dailyHoro: `$HORO Diario`,
    chooseZodiacSystem: `Elige Tu Sistema Zodiacal`,
    chooseWesternZodiac: `Elige Tu Signo Zodiacal Occidental`,
    chooseChineseZodiac: `Elige Tu Signo Zodiacal Chino`,
    western: `Occidental`,
    chinese: `Chino`,
    weeklyProgress: `Progreso Semanal`,
    todayVisitRecorded: `‚úì ¬°Reclamo de hoy registrado!`,
    alreadyClaimedOnChain: `‚úÖ Ya reclamado hoy (verificado en blockchain)`,
    dailyReading: `Lectura Diaria`,
    dailyReward: `Recompensa $HORO Diaria`,
    earnDailyHoro: `¬°Gana {amount} $HORO hoy!`,
    todayRewardEarned: `‚úÖ ¬°{amount} $HORO de hoy ganados!`,
    checkInToday: `Registrarse y Ganar $HORO`,
    checkingIn: `Ganando $HORO...`,
    claiming: `Reclamando...`,
    verifyingClaim: `Verificando estado del reclamo...`,
    streakBonus: `Bono de Racha`,
    daysStreak: `racha de {days} d√≠as`,
    baseReward: `Recompensa base: {amount} $HORO`,
    bonusReward: `Bono de racha: +{amount} $HORO`,
    totalDailyReward: `Total hoy: {amount} $HORO`,
    blockchainTransaction: `¬°Esto crear√° una transacci√≥n blockchain y transferir√° tokens $HORO reales a tu billetera!`,
    rewardsClaimedTitle: `‚úÖ ¬°Recompensas Reclamadas!`,
    rewardsClaimed: `Ya has reclamado tus tokens $HORO esta semana.`,
    comeBackMonday: `¬°Vuelve el pr√≥ximo lunes para comenzar una nueva semana!`,
    connectWalletButton: `Conectar Billetera`,
    connectWallet: `¬°Conecta tu billetera para rastrear autom√°ticamente tus visitas diarias y reclamar recompensas $HORO!`,
    connectSuietWallet: `Conectar Billetera`,
    connectSuietWalletTitle: `Conectar Billetera`,
    connectSuietPrompt: `¬°Conecta tu billetera para rastrear autom√°ticamente tus visitas diarias y reclamar recompensas $HORO con seguridad criptogr√°fica!`,
    suietWalletSecure: `Billetera segura con firma de mensajes`,
    whySuiet: `¬øPor qu√© Conectar Billetera?`,
    suietBenefitSigning: `Soporta firma criptogr√°fica de mensajes`,
    suietBenefitSecurity: `Seguridad mejorada para airdrops de NFT`,
    suietBenefitFraud: `Previene fraude en el registro`,
    suietBenefitCompatibility: `Mejor compatibilidad con caracter√≠sticas $HORO`,
    dontHaveSuiet: `¬øNo tienes billetera?`,
    downloadSuiet: `Descargar Billetera ‚Üí`,
    useSuietForSigning: `Por favor usa tu billetera para firma segura de mensajes`,
    autoSigning: `Firmando autom√°ticamente la visita de hoy... ‚ú®`,
    transitioningToZodiac: `Transicionando a selecci√≥n zodiacal...`,
    wallet: `Billetera`,
    
    // Loading States
    connecting: `Conectando...`,
    signing: `Firmando...`,
    loading: `Cargando...`,
    
    // Testnet Education
    testnetDisclaimer: `üß™ Esta app usa Sui Testnet`,
    testnetExplainer: `Los tokens de testnet no tienen valor monetario real. ¬°Este es un entorno seguro para aprender y ganar tokens $HORO virtuales!`,
    learnMoreSuiet: `Aprende c√≥mo instalar billetera`,
    needHelp: `¬øNecesitas ayuda?`,
    
    // Gas Management
    gasLow: `‚õΩ Saldo de Gas Bajo`,
    gasNeeded: `Por favor a√±ade SUI de testnet a tu billetera para transacciones`,
    getFreeGas: `Abrir Faucet de Testnet`,
    gettingGas: `Abriendo faucet...`,
    gasSuccess: `‚úÖ ¬°SUI gratuito de testnet a√±adido a tu billetera!`,
    gasError: `‚ùå Error al abrir faucet. Por favor visita faucet.testnet.sui.io manualmente.`,
    gasBalance: `Saldo de Gas`,
    sufficientGas: `‚úÖ Gas suficiente para transacciones`,
    
    // Footer
    about: `Acerca de`,
    tokenomics: `Token√≥mica`,
    help: `Ayuda`,
    reset: `Reiniciar`,
    
    // Claim Status Messages
    alreadyClaimedToday: `¬°Ya Reclamado Hoy!`,
    alreadyClaimedMessage: `¬°Has ganado tu $HORO diario! Vuelve ma√±ana.`,
    nextClaimAvailable: `Pr√≥ximo reclamo disponible: Ma√±ana`,
    claimTodaysHoro: `üéÅ Reclamar $HORO de Hoy`,
    missedDays: `D√≠as Perdidos`,
    completedDays: `D√≠as Completados`,
    claimedAmountToday: `¬°Reclamados {amount} $HORO hoy!`,
    completed: `Completado`,
    missed: `Perdido`,
    available: `Disponible`,
    future: `Futuro`,
    
    // Network Status
    connected: `Conectado`,
    connectionVerified: `Conexi√≥n a Sui Testnet verificada`,
    refreshStatus: `Actualizar Estado`,
    
    // Days of the Week
    sunday: `Dom`,
    monday: `Lun`, 
    tuesday: `Mar`,
    wednesday: `Mi√©`,
    thursday: `Jue`,
    friday: `Vie`,
    saturday: `S√°b`,
    
    // Zodiac Signs
    aries: `aries`,
    taurus: `tauro`, 
    gemini: `g√©minis`,
    cancer: `c√°ncer`,
    leo: `leo`,
    virgo: `virgo`,
    libra: `libra`,
    scorpio: `escorpio`,
    sagittarius: `sagitario`,
    capricorn: `capricornio`,
    aquarius: `acuario`,
    pisces: `piscis`,
    
    // Chinese Zodiac
    rat: `rata`,
    ox: `buey`,
    tiger: `tigre`, 
    rabbit: `conejo`,
    dragon: `drag√≥n`,
    snake: `serpiente`,
    horse: `caballo`,
    goat: `cabra`,
    monkey: `mono`,
    rooster: `gallo`,
    dog: `perro`,
    pig: `cerdo`,
    
    // Elements
    water: `Agua`,
    earth: `Tierra`, 
    wood: `Madera`,
    fire: `Fuego`,
    metal: `Metal`
  },
  ru: {
    // Main UI
    dailyHoro: `–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è $HORO`,
    chooseZodiacSystem: `–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à—É –ó–æ–¥–∏–∞–∫–∞–ª—å–Ω—É—é –°–∏—Å—Ç–µ–º—É`,
    chooseWesternZodiac: `–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –ó–∞–ø–∞–¥–Ω—ã–π –ó–Ω–∞–∫ –ó–æ–¥–∏–∞–∫–∞`,
    chooseChineseZodiac: `–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –ö–∏—Ç–∞–π—Å–∫–∏–π –ó–Ω–∞–∫ –ó–æ–¥–∏–∞–∫–∞`,
    western: `–ó–∞–ø–∞–¥–Ω—ã–π`,
    chinese: `–ö–∏—Ç–∞–π—Å–∫–∏–π`,
    weeklyProgress: `–ù–µ–¥–µ–ª—å–Ω—ã–π –ü—Ä–æ–≥—Ä–µ—Å—Å`,
    todayVisitRecorded: `‚úì –°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ!`,
    alreadyClaimedOnChain: `‚úÖ –£–∂–µ –ø–æ–ª—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ)`,
    dailyReading: `–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ß—Ç–µ–Ω–∏–µ`,
    dailyReward: `–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ù–∞–≥—Ä–∞–¥–∞ $HORO`,
    earnDailyHoro: `–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ {amount} $HORO —Å–µ–≥–æ–¥–Ω—è!`,
    todayRewardEarned: `‚úÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ {amount} $HORO –∑–∞—Ä–∞–±–æ—Ç–∞–Ω—ã!`,
    checkInToday: `–û—Ç–º–µ—Ç–∏—Ç—å—Å—è –∏ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å $HORO`,
    checkingIn: `–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º $HORO...`,
    claiming: `–ü–æ–ª—É—á–∞–µ–º...`,
    verifyingClaim: `–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è...`,
    streakBonus: `–ë–æ–Ω—É—Å –∑–∞ –°–µ—Ä–∏—é`,
    daysStreak: `—Å–µ—Ä–∏—è {days} –¥–Ω–µ–π`,
    baseReward: `–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {amount} $HORO`,
    bonusReward: `–ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é: +{amount} $HORO`,
    totalDailyReward: `–í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: {amount} $HORO`,
    blockchainTransaction: `–≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–ª–æ–∫—á–µ–π–Ω–µ –∏ –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã $HORO –≤ –≤–∞—à –∫–æ—à–µ–ª–µ–∫!`,
    rewardsClaimedTitle: `‚úÖ –ù–∞–≥—Ä–∞–¥—ã –ü–æ–ª—É—á–µ–Ω—ã!`,
    rewardsClaimed: `–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã $HORO –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ.`,
    comeBackMonday: `–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –Ω–µ–¥–µ–ª—é!`,
    connectWalletButton: `–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ö–æ—à–µ–ª–µ–∫`,
    connectWallet: `–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Å–µ—â–µ–Ω–∏–π –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ $HORO!`,
    connectSuietWallet: `–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ö–æ—à–µ–ª–µ–∫`,
    connectSuietWalletTitle: `–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ö–æ—à–µ–ª–µ–∫`,
    connectSuietPrompt: `–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Å–µ—â–µ–Ω–∏–π –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ $HORO —Å –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é!`,
    suietWalletSecure: `–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ —Å –ø–æ–¥–ø–∏—Å—å—é —Å–æ–æ–±—â–µ–Ω–∏–π`,
    whySuiet: `–ü–æ—á–µ–º—É –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ö–æ—à–µ–ª–µ–∫?`,
    suietBenefitSigning: `–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –ø–æ–¥–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π`,
    suietBenefitSecurity: `–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è NFT airdrop`,
    suietBenefitFraud: `–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`,
    suietBenefitCompatibility: `–õ—É—á—à–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ $HORO`,
    dontHaveSuiet: `–ù–µ—Ç –∫–æ—à–µ–ª—å–∫–∞?`,
    downloadSuiet: `–°–∫–∞—á–∞—Ç—å –ö–æ—à–µ–ª–µ–∫ ‚Üí`,
    useSuietForSigning: `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏–π`,
    autoSigning: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ... ‚ú®`,
    transitioningToZodiac: `–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∑–æ–¥–∏–∞–∫–∞...`,
    wallet: `–ö–æ—à–µ–ª–µ–∫`,
    
    // Loading States
    connecting: `–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...`,
    signing: `–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º...`,
    loading: `–ó–∞–≥—Ä—É–∂–∞–µ–º...`,
    
    // Testnet Education
    testnetDisclaimer: `üß™ –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Sui Testnet`,
    testnetExplainer: `–¢–æ–∫–µ–Ω—ã —Ç–µ—Å—Ç–Ω–µ—Ç–∞ –Ω–µ –∏–º–µ—é—Ç —Ä–µ–∞–ª—å–Ω–æ–π –¥–µ–Ω–µ–∂–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Ä–µ–¥–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ $HORO!`,
    learnMoreSuiet: `–£–∑–Ω–∞–π—Ç–µ, –∫–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫`,
    needHelp: `–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?`,
    
    // Gas Management
    gasLow: `‚õΩ –ù–∏–∑–∫–∏–π –ë–∞–ª–∞–Ω—Å –ì–∞–∑–∞`,
    gasNeeded: `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–Ω–µ—Ç SUI –≤ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`,
    getFreeGas: `–û—Ç–∫—Ä—ã—Ç—å –¢–µ—Å—Ç–Ω–µ—Ç –ö—Ä–∞–Ω`,
    gettingGas: `–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫—Ä–∞–Ω...`,
    gasSuccess: `‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç–Ω–µ—Ç SUI –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –∫–æ—à–µ–ª–µ–∫!`,
    gasError: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å–µ—Ç–∏—Ç–µ faucet.testnet.sui.io –≤—Ä—É—á–Ω—É—é.`,
    gasBalance: `–ë–∞–ª–∞–Ω—Å –ì–∞–∑–∞`,
    sufficientGas: `‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–∞–∑–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`,
    
    // Footer
    about: `–û –ø—Ä–æ–µ–∫—Ç–µ`,
    tokenomics: `–¢–æ–∫–µ–Ω–æ–º–∏–∫–∞`,
    help: `–ü–æ–º–æ—â—å`,
    reset: `–°–±—Ä–æ—Å`,
    
    // Claim Status Messages
    alreadyClaimedToday: `–£–∂–µ –ü–æ–ª—É—á–µ–Ω–æ –°–µ–≥–æ–¥–Ω—è!`,
    alreadyClaimedMessage: `–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ —Å–≤–æ–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ $HORO! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞.`,
    nextClaimAvailable: `–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ: –ó–∞–≤—Ç—Ä–∞`,
    claimTodaysHoro: `üéÅ –ü–æ–ª—É—á–∏—Ç—å –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ $HORO`,
    missedDays: `–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –î–Ω–∏`,
    completedDays: `–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –î–Ω–∏`,
    claimedAmountToday: `–ü–æ–ª—É—á–µ–Ω–æ {amount} $HORO —Å–µ–≥–æ–¥–Ω—è!`,
    completed: `–ó–∞–≤–µ—Ä—à–µ–Ω–æ`,
    missed: `–ü—Ä–æ–ø—É—â–µ–Ω–æ`,
    available: `–î–æ—Å—Ç—É–ø–Ω–æ`,
    future: `–ë—É–¥—É—â–µ–µ`,
    
    // Network Status
    connected: `–ü–æ–¥–∫–ª—é—á–µ–Ω`,
    connectionVerified: `–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Sui Testnet –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ`,
    refreshStatus: `–û–±–Ω–æ–≤–∏—Ç—å –°—Ç–∞—Ç—É—Å`,
    
    // Days of the Week
    sunday: `–í—Å`,
    monday: `–ü–Ω`, 
    tuesday: `–í—Ç`,
    wednesday: `–°—Ä`,
    thursday: `–ß—Ç`,
    friday: `–ü—Ç`,
    saturday: `–°–±`,
    
    // Zodiac Signs
    aries: `–æ–≤–µ–Ω`,
    taurus: `—Ç–µ–ª–µ—Ü`, 
    gemini: `–±–ª–∏–∑–Ω–µ—Ü—ã`,
    cancer: `—Ä–∞–∫`,
    leo: `–ª–µ–≤`,
    virgo: `–¥–µ–≤–∞`,
    libra: `–≤–µ—Å—ã`,
    scorpio: `—Å–∫–æ—Ä–ø–∏–æ–Ω`,
    sagittarius: `—Å—Ç—Ä–µ–ª–µ—Ü`,
    capricorn: `–∫–æ–∑–µ—Ä–æ–≥`,
    aquarius: `–≤–æ–¥–æ–ª–µ–π`,
    pisces: `—Ä—ã–±—ã`,
    
    // Chinese Zodiac
    rat: `–∫—Ä—ã—Å–∞`,
    ox: `–±—ã–∫`,
    tiger: `—Ç–∏–≥—Ä`, 
    rabbit: `–∫—Ä–æ–ª–∏–∫`,
    dragon: `–¥—Ä–∞–∫–æ–Ω`,
    snake: `–∑–º–µ—è`,
    horse: `–ª–æ—à–∞–¥—å`,
    goat: `–∫–æ–∑–∞`,
    monkey: `–æ–±–µ–∑—å—è–Ω–∞`,
    rooster: `–ø–µ—Ç—É—Ö`,
    dog: `—Å–æ–±–∞–∫–∞`,
    pig: `—Å–≤–∏–Ω—å—è`,
    
    // Elements
    water: `–í–æ–¥–∞`,
    earth: `–ó–µ–º–ª—è`, 
    wood: `–î–µ—Ä–µ–≤–æ`,
    fire: `–û–≥–æ–Ω—å`,
    metal: `–ú–µ—Ç–∞–ª–ª`
  },
  fr: {
    // Main UI
    dailyHoro: `$HORO Quotidien`,
    chooseZodiacSystem: `Choisissez Votre Syst√®me Zodiacal`,
    chooseWesternZodiac: `Choisissez Votre Signe Zodiacal Occidental`,
    chooseChineseZodiac: `Choisissez Votre Signe Zodiacal Chinois`,
    western: `Occidental`,
    chinese: `Chinois`,
    weeklyProgress: `Progr√®s Hebdomadaire`,
    todayVisitRecorded: `‚úì R√©clamation d'aujourd'hui enregistr√©e!`,
    alreadyClaimedOnChain: `‚úÖ D√©j√† r√©clam√© aujourd'hui (v√©rifi√© sur blockchain)`,
    dailyReading: `Lecture Quotidienne`,
    dailyReward: `R√©compense $HORO Quotidienne`,
    earnDailyHoro: `Gagnez {amount} $HORO aujourd'hui!`,
    todayRewardEarned: `‚úÖ {amount} $HORO d'aujourd'hui gagn√©s!`,
    checkInToday: `S'enregistrer et Gagner $HORO`,
    checkingIn: `Gagner $HORO...`,
    claiming: `R√©clamation...`,
    verifyingClaim: `V√©rification du statut de r√©clamation...`,
    streakBonus: `Bonus de S√©rie`,
    daysStreak: `s√©rie de {days} jours`,
    baseReward: `R√©compense de base: {amount} $HORO`,
    bonusReward: `Bonus de s√©rie: +{amount} $HORO`,
    totalDailyReward: `Total aujourd'hui: {amount} $HORO`,
    blockchainTransaction: `Ceci cr√©era une transaction blockchain et transf√©rera de vrais tokens $HORO vers votre portefeuille!`,
    rewardsClaimedTitle: `‚úÖ R√©compenses R√©clam√©es!`,
    rewardsClaimed: `Vous avez d√©j√† r√©clam√© vos tokens $HORO cette semaine.`,
    comeBackMonday: `Revenez lundi prochain pour commencer une nouvelle semaine!`,
    connectWalletButton: `Connecter Portefeuille`,
    connectWallet: `Connectez votre portefeuille pour suivre automatiquement vos visites quotidiennes et r√©clamer les r√©compenses $HORO!`,
    connectSuietWallet: `Connecter Portefeuille`,
    connectSuietWalletTitle: `Connecter Portefeuille`,
    connectSuietPrompt: `Connectez votre portefeuille pour suivre automatiquement vos visites quotidiennes et r√©clamer les r√©compenses $HORO avec s√©curit√© cryptographique!`,
    suietWalletSecure: `Portefeuille s√©curis√© avec signature de messages`,
    whySuiet: `Pourquoi Connecter Portefeuille?`,
    suietBenefitSigning: `Supporte la signature cryptographique de messages`,
    suietBenefitSecurity: `S√©curit√© renforc√©e pour les airdrops NFT`,
    suietBenefitFraud: `Pr√©vient la fraude d'enregistrement`,
    suietBenefitCompatibility: `Meilleure compatibilit√© avec les fonctionnalit√©s $HORO`,
    dontHaveSuiet: `Pas de portefeuille?`,
    downloadSuiet: `T√©l√©charger Portefeuille ‚Üí`,
    useSuietForSigning: `Veuillez utiliser votre portefeuille pour la signature s√©curis√©e de messages`,
    autoSigning: `Signature automatique de la visite d'aujourd'hui... ‚ú®`,
    transitioningToZodiac: `Transition vers la s√©lection zodiacale...`,
    wallet: `Portefeuille`,
    
    // Loading States
    connecting: `Connexion...`,
    signing: `Signature...`,
    loading: `Chargement...`,
    
    // Testnet Education
    testnetDisclaimer: `üß™ Cette app utilise Sui Testnet`,
    testnetExplainer: `Les tokens testnet n'ont aucune valeur mon√©taire r√©elle. C'est un environnement s√ªr pour apprendre et gagner des tokens $HORO virtuels!`,
    learnMoreSuiet: `Apprenez comment installer un portefeuille`,
    needHelp: `Besoin d'aide?`,
    
    // Gas Management
    gasLow: `‚õΩ Solde Gas Faible`,
    gasNeeded: `Veuillez ajouter du SUI testnet √† votre portefeuille pour les transactions`,
    getFreeGas: `Ouvrir Robinet Testnet`,
    gettingGas: `Ouverture du robinet...`,
    gasSuccess: `‚úÖ SUI testnet gratuit ajout√© √† votre portefeuille!`,
    gasError: `‚ùå √âchec d'ouverture du robinet. Veuillez visiter faucet.testnet.sui.io manuellement.`,
    gasBalance: `Solde Gas`,
    sufficientGas: `‚úÖ Gas suffisant pour les transactions`,
    
    // Footer
    about: `√Ä propos`,
    tokenomics: `Tokenomique`,
    help: `Aide`,
    reset: `R√©initialiser`,
    
    // Claim Status Messages
    alreadyClaimedToday: `D√©j√† R√©clam√© Aujourd'hui!`,
    alreadyClaimedMessage: `Vous avez gagn√© votre $HORO quotidien! Revenez demain.`,
    nextClaimAvailable: `Prochaine r√©clamation disponible: Demain`,
    claimTodaysHoro: `üéÅ R√©clamer $HORO d'Aujourd'hui`,
    missedDays: `Jours Manqu√©s`,
    completedDays: `Jours Compl√©t√©s`,
    claimedAmountToday: `R√©clam√© {amount} $HORO aujourd'hui!`,
    completed: `Termin√©`,
    missed: `Manqu√©`,
    available: `Disponible`,
    future: `Futur`,
    
    // Network Status
    connected: `Connect√©`,
    connectionVerified: `Connexion √† Sui Testnet v√©rifi√©e`,
    refreshStatus: `Actualiser le Statut`,
    
    // Days of the Week
    sunday: `Dim`,
    monday: `Lun`, 
    tuesday: `Mar`,
    wednesday: `Mer`,
    thursday: `Jeu`,
    friday: `Ven`,
    saturday: `Sam`,
    
    // Zodiac Signs
    aries: `b√©lier`,
    taurus: `taureau`, 
    gemini: `g√©meaux`,
    cancer: `cancer`,
    leo: `lion`,
    virgo: `vierge`,
    libra: `balance`,
    scorpio: `scorpion`,
    sagittarius: `sagittaire`,
    capricorn: `capricorne`,
    aquarius: `verseau`,
    pisces: `poissons`,
    
    // Chinese Zodiac
    rat: `rat`,
    ox: `b≈ìuf`,
    tiger: `tigre`, 
    rabbit: `lapin`,
    dragon: `dragon`,
    snake: `serpent`,
    horse: `cheval`,
    goat: `ch√®vre`,
    monkey: `singe`,
    rooster: `coq`,
    dog: `chien`,
    pig: `cochon`,
    
    // Elements
    water: `Eau`,
    earth: `Terre`, 
    wood: `Bois`,
    fire: `Feu`,
    metal: `M√©tal`
  },
  zh: {
    // Main UI
    dailyHoro: `ÊØèÊó• $HORO`,
    chooseZodiacSystem: `ÈÄâÊã©ÊÇ®ÁöÑÊòüÂ∫ßÁ≥ªÁªü`,
    chooseWesternZodiac: `ÈÄâÊã©ÊÇ®ÁöÑË•øÊñπÊòüÂ∫ß`,
    chooseChineseZodiac: `ÈÄâÊã©ÊÇ®ÁöÑÁîüËÇñ`,
    western: `Ë•øÊñπ`,
    chinese: `‰∏≠ÂõΩ`,
    weeklyProgress: `ÊØèÂë®ËøõÂ∫¶`,
    todayVisitRecorded: `‚úì ‰ªäÊó•Á≠æÂà∞Â∑≤ËÆ∞ÂΩïÔºÅ`,
    alreadyClaimedOnChain: `‚úÖ ‰ªäÊó•Â∑≤È¢ÜÂèñÔºàÂå∫ÂùóÈìæÂ∑≤È™åËØÅÔºâ`,
    dailyReading: `ÊØèÊó•ÈòÖËØª`,
    dailyReward: `ÊØèÊó•$HOROÂ•ñÂä±`,
    earnDailyHoro: `‰ªäÂ§©ËµöÂèñ{amount} $HOROÔºÅ`,
    todayRewardEarned: `‚úÖ ‰ªäÂ§©ÁöÑ{amount} $HOROÂ∑≤ËµöÂèñÔºÅ`,
    checkInToday: `Á≠æÂà∞Âπ∂ËµöÂèñ$HORO`,
    checkingIn: `Ê≠£Âú®ËµöÂèñ$HORO...`,
    claiming: `Ê≠£Âú®È¢ÜÂèñ...`,
    verifyingClaim: `Ê≠£Âú®È™åËØÅÈ¢ÜÂèñÁä∂ÊÄÅ...`,
    streakBonus: `ËøûÁª≠Â•ñÂä±`,
    daysStreak: `{days}Â§©ËøûÁª≠`,
    baseReward: `Âü∫Á°ÄÂ•ñÂä±Ôºö{amount} $HORO`,
    bonusReward: `ËøûÁª≠Â•ñÂä±Ôºö+{amount} $HORO`,
    totalDailyReward: `‰ªäÊó•ÊÄªËÆ°Ôºö{amount} $HORO`,
    blockchainTransaction: `ËøôÂ∞ÜÂàõÂª∫‰∏Ä‰∏™Âå∫ÂùóÈìæ‰∫§ÊòìÂπ∂Â∞ÜÁúüÂÆûÁöÑ$HORO‰ª£Â∏ÅËΩ¨ÁßªÂà∞ÊÇ®ÁöÑÈí±ÂåÖÔºÅ`,
    rewardsClaimedTitle: `‚úÖ Â•ñÂä±Â∑≤È¢ÜÂèñÔºÅ`,
    rewardsClaimed: `ÊÇ®Â∑≤ÁªèÈ¢ÜÂèñ‰∫ÜÊú¨Âë®ÁöÑ$HORO‰ª£Â∏Å„ÄÇ`,
    comeBackMonday: `‰∏ãÂë®‰∏ÄÂõûÊù•ÂºÄÂßãÊñ∞ÁöÑ‰∏ÄÂë®ÔºÅ`,
    connectWalletButton: `ËøûÊé•Èí±ÂåÖ`,
    connectWallet: `ËøûÊé•ÊÇ®ÁöÑÈí±ÂåÖ‰ª•Ëá™Âä®Ë∑üË∏™ÊØèÊó•ËÆøÈóÆÂπ∂È¢ÜÂèñ$HOROÂ•ñÂä±ÔºÅ`,
    connectSuietWallet: `ËøûÊé•Èí±ÂåÖ`,
    connectSuietWalletTitle: `ËøûÊé•Èí±ÂåÖ`,
    connectSuietPrompt: `ËøûÊé•ÊÇ®ÁöÑÈí±ÂåÖ‰ª•Ëá™Âä®Ë∑üË∏™ÊØèÊó•ËÆøÈóÆÂπ∂ÈÄöËøáÂä†ÂØÜÂÆâÂÖ®È¢ÜÂèñ$HOROÂ•ñÂä±ÔºÅ`,
    suietWalletSecure: `Â∏¶ÊúâÊ∂àÊÅØÁ≠æÂêçÁöÑÂÆâÂÖ®Èí±ÂåÖ`,
    whySuiet: `‰∏∫‰ªÄ‰πàËøûÊé•Èí±ÂåÖÔºü`,
    suietBenefitSigning: `ÊîØÊåÅÂä†ÂØÜÊ∂àÊÅØÁ≠æÂêç`,
    suietBenefitSecurity: `Â¢ûÂº∫NFTÁ©∫ÊäïÂÆâÂÖ®ÊÄß`,
    suietBenefitFraud: `Èò≤Ê≠¢Á≠æÂà∞Ê¨∫ËØà`,
    suietBenefitCompatibility: `‰∏é$HOROÂäüËÉΩÊúÄ‰Ω≥ÂÖºÂÆπ`,
    dontHaveSuiet: `Ê≤°ÊúâÈí±ÂåÖÔºü`,
    downloadSuiet: `‰∏ãËΩΩÈí±ÂåÖ ‚Üí`,
    useSuietForSigning: `ËØ∑‰ΩøÁî®ÊÇ®ÁöÑÈí±ÂåÖËøõË°åÂÆâÂÖ®Ê∂àÊÅØÁ≠æÂêç`,
    autoSigning: `Ê≠£Âú®Ëá™Âä®Á≠æÁΩ≤‰ªäÊó•ËÆøÈóÆ... ‚ú®`,
    transitioningToZodiac: `Ê≠£Âú®ËΩ¨Êç¢Âà∞ÊòüÂ∫ßÈÄâÊã©...`,
    wallet: `Èí±ÂåÖ`,
    
    // Loading States
    connecting: `ËøûÊé•‰∏≠...`,
    signing: `Á≠æÂêç‰∏≠...`,
    loading: `Âä†ËΩΩ‰∏≠...`,
    
    // Testnet Education
    testnetDisclaimer: `üß™ Ê≠§Â∫îÁî®‰ΩøÁî®SuiÊµãËØïÁΩë`,
    testnetExplainer: `ÊµãËØïÁΩë‰ª£Â∏ÅÊ≤°ÊúâÁúüÂÆûË¥ßÂ∏Å‰ª∑ÂÄº„ÄÇËøôÊòØ‰∏Ä‰∏™ÂÆâÂÖ®ÁöÑÁéØÂ¢ÉÊù•Â≠¶‰π†ÂíåËµöÂèñËôöÊãü$HORO‰ª£Â∏ÅÔºÅ`,
    learnMoreSuiet: `‰∫ÜËß£Â¶Ç‰ΩïÂÆâË£ÖÈí±ÂåÖ`,
    needHelp: `ÈúÄË¶ÅÂ∏ÆÂä©Ôºü`,
    
    // Gas Management
    gasLow: `‚õΩ Gas‰ΩôÈ¢ù‰∏çË∂≥`,
    gasNeeded: `ËØ∑ÂêëÊÇ®ÁöÑÈí±ÂåÖÊ∑ªÂä†ÊµãËØïÁΩëSUIËøõË°å‰∫§Êòì`,
    getFreeGas: `ÊâìÂºÄÊµãËØïÁΩëÊ∞¥ÈæôÂ§¥`,
    gettingGas: `Ê≠£Âú®ÊâìÂºÄÊ∞¥ÈæôÂ§¥...`,
    gasSuccess: `‚úÖ ÂÖçË¥πÊµãËØïÁΩëSUIÂ∑≤Ê∑ªÂä†Âà∞ÊÇ®ÁöÑÈí±ÂåÖÔºÅ`,
    gasError: `‚ùå ÊâìÂºÄÊ∞¥ÈæôÂ§¥Â§±Ë¥•„ÄÇËØ∑ÊâãÂä®ËÆøÈóÆfaucet.testnet.sui.io„ÄÇ`,
    gasBalance: `Gas‰ΩôÈ¢ù`,
    sufficientGas: `‚úÖ ‰∫§ÊòìGasÂÖÖË∂≥`,
    
    // Footer
    about: `ÂÖ≥‰∫é`,
    tokenomics: `‰ª£Â∏ÅÁªèÊµé`,
    help: `Â∏ÆÂä©`,
    reset: `ÈáçÁΩÆ`,
    
    // Claim Status Messages
    alreadyClaimedToday: `‰ªäÊó•Â∑≤È¢ÜÂèñÔºÅ`,
    alreadyClaimedMessage: `ÊÇ®Â∑≤Ëé∑Âæó‰ªäÊó•$HOROÔºÅÊòéÂ§©ÂÜçÊù•„ÄÇ`,
    nextClaimAvailable: `‰∏ãÊ¨°È¢ÜÂèñÊó∂Èó¥ÔºöÊòéÂ§©`,
    claimTodaysHoro: `üéÅ È¢ÜÂèñ‰ªäÊó•$HORO`,
    missedDays: `ÈîôËøáÁöÑÂ§©Êï∞`,
    completedDays: `ÂÆåÊàêÁöÑÂ§©Êï∞`,
    claimedAmountToday: `‰ªäÊó•Â∑≤È¢ÜÂèñ{amount} $HOROÔºÅ`,
    completed: `Â∑≤ÂÆåÊàê`,
    missed: `Â∑≤ÈîôËøá`,
    available: `ÂèØÁî®`,
    future: `Êú™Êù•`,
    
    // Network Status
    connected: `Â∑≤ËøûÊé•`,
    connectionVerified: `SuiÊµãËØïÁΩëËøûÊé•Â∑≤È™åËØÅ`,
    refreshStatus: `Âà∑Êñ∞Áä∂ÊÄÅ`,
    
    // Days of the Week
    sunday: `Âë®Êó•`,
    monday: `Âë®‰∏Ä`, 
    tuesday: `Âë®‰∫å`,
    wednesday: `Âë®‰∏â`,
    thursday: `Âë®Âõõ`,
    friday: `Âë®‰∫î`,
    saturday: `Âë®ÂÖ≠`,
    
    // Zodiac Signs
    aries: `ÁôΩÁæäÂ∫ß`,
    taurus: `ÈáëÁâõÂ∫ß`, 
    gemini: `ÂèåÂ≠êÂ∫ß`,
    cancer: `Â∑®ËüπÂ∫ß`,
    leo: `ÁãÆÂ≠êÂ∫ß`,
    virgo: `Â§ÑÂ•≥Â∫ß`,
    libra: `Â§©Áß§Â∫ß`,
    scorpio: `Â§©ËùéÂ∫ß`,
    sagittarius: `Â∞ÑÊâãÂ∫ß`,
    capricorn: `Êë©ÁæØÂ∫ß`,
    aquarius: `Ê∞¥Áì∂Â∫ß`,
    pisces: `ÂèåÈ±ºÂ∫ß`,
    
    // Chinese Zodiac
    rat: `Èº†`,
    ox: `Áâõ`,
    tiger: `Ëôé`, 
    rabbit: `ÂÖî`,
    dragon: `Èæô`,
    snake: `Ëõá`,
    horse: `È©¨`,
    goat: `Áæä`,
    monkey: `Áå¥`,
    rooster: `È∏°`,
    dog: `Áãó`,
    pig: `Áå™`,
    
    // Elements
    water: `Ê∞¥`,
    earth: `Âúü`, 
    wood: `Êú®`,
    fire: `ÁÅ´`,
    metal: `Èáë`
  },
  'zh-TR': {
    // Main UI
    dailyHoro: `ÊØèÊó• $HORO`,
    chooseZodiacSystem: `ÈÅ∏ÊìáÊÇ®ÁöÑÊòüÂ∫ßÁ≥ªÁµ±`,
    chooseWesternZodiac: `ÈÅ∏ÊìáÊÇ®ÁöÑË•øÊñπÊòüÂ∫ß`,
    chooseChineseZodiac: `ÈÅ∏ÊìáÊÇ®ÁöÑÁîüËÇñ`,
    western: `Ë•øÊñπ`,
    chinese: `‰∏≠Âúã`,
    weeklyProgress: `ÊØèÈÄ±ÈÄ≤Â∫¶`,
    todayVisitRecorded: `‚úì ‰ªäÊó•Á∞ΩÂà∞Â∑≤Ë®òÈåÑÔºÅ`,
    alreadyClaimedOnChain: `‚úÖ ‰ªäÊó•Â∑≤È†òÂèñÔºàÂçÄÂ°äÈèàÂ∑≤È©óË≠âÔºâ`,
    dailyReading: `ÊØèÊó•Èñ±ËÆÄ`,
    dailyReward: `ÊØèÊó•$HOROÁçéÂãµ`,
    earnDailyHoro: `‰ªäÂ§©Ë≥∫Âèñ{amount} $HOROÔºÅ`,
    todayRewardEarned: `‚úÖ ‰ªäÂ§©ÁöÑ{amount} $HOROÂ∑≤Ë≥∫ÂèñÔºÅ`,
    checkInToday: `Á∞ΩÂà∞‰∏¶Ë≥∫Âèñ$HORO`,
    checkingIn: `Ê≠£Âú®Ë≥∫Âèñ$HORO...`,
    claiming: `Ê≠£Âú®È†òÂèñ...`,
    verifyingClaim: `Ê≠£Âú®È©óË≠âÈ†òÂèñÁãÄÊÖã...`,
    streakBonus: `ÈÄ£Á∫åÁçéÂãµ`,
    daysStreak: `{days}Â§©ÈÄ£Á∫å`,
    baseReward: `Âü∫Á§éÁçéÂãµÔºö{amount} $HORO`,
    bonusReward: `ÈÄ£Á∫åÁçéÂãµÔºö+{amount} $HORO`,
    totalDailyReward: `‰ªäÊó•Á∏ΩË®àÔºö{amount} $HORO`,
    blockchainTransaction: `ÈÄôÂ∞áÂâµÂª∫‰∏ÄÂÄãÂçÄÂ°äÈèà‰∫§Êòì‰∏¶Â∞áÁúüÂØ¶ÁöÑ$HORO‰ª£Âπ£ËΩâÁßªÂà∞ÊÇ®ÁöÑÈå¢ÂåÖÔºÅ`,
    rewardsClaimedTitle: `‚úÖ ÁçéÂãµÂ∑≤È†òÂèñÔºÅ`,
    rewardsClaimed: `ÊÇ®Â∑≤Á∂ìÈ†òÂèñ‰∫ÜÊú¨ÈÄ±ÁöÑ$HORO‰ª£Âπ£„ÄÇ`,
    comeBackMonday: `‰∏ãÈÄ±‰∏ÄÂõû‰æÜÈñãÂßãÊñ∞ÁöÑ‰∏ÄÈÄ±ÔºÅ`,
    connectWalletButton: `ÈÄ£Êé•Èå¢ÂåÖ`,
    connectWallet: `ÈÄ£Êé•ÊÇ®ÁöÑÈå¢ÂåÖ‰ª•Ëá™ÂãïË∑üË∏™ÊØèÊó•Ë®™Âïè‰∏¶È†òÂèñ$HOROÁçéÂãµÔºÅ`,
    connectSuietWallet: `ÈÄ£Êé•Èå¢ÂåÖ`,
    connectSuietWalletTitle: `ÈÄ£Êé•Èå¢ÂåÖ`,
    connectSuietPrompt: `ÈÄ£Êé•ÊÇ®ÁöÑÈå¢ÂåÖ‰ª•Ëá™ÂãïË∑üË∏™ÊØèÊó•Ë®™Âïè‰∏¶ÈÄöÈÅéÂä†ÂØÜÂÆâÂÖ®È†òÂèñ$HOROÁçéÂãµÔºÅ`,
    suietWalletSecure: `Â∏∂ÊúâÊ∂àÊÅØÁ∞ΩÂêçÁöÑÂÆâÂÖ®Èå¢ÂåÖ`,
    whySuiet: `ÁÇ∫‰ªÄÈ∫ºÈÄ£Êé•Èå¢ÂåÖÔºü`,
    suietBenefitSigning: `ÊîØÊåÅÂä†ÂØÜÊ∂àÊÅØÁ∞ΩÂêç`,
    suietBenefitSecurity: `Â¢ûÂº∑NFTÁ©∫ÊäïÂÆâÂÖ®ÊÄß`,
    suietBenefitFraud: `Èò≤Ê≠¢Á∞ΩÂà∞Ê¨∫Ë©ê`,
    suietBenefitCompatibility: `Ëàá$HOROÂäüËÉΩÊúÄ‰Ω≥ÂÖºÂÆπ`,
    dontHaveSuiet: `Ê≤íÊúâÈå¢ÂåÖÔºü`,
    downloadSuiet: `‰∏ãËºâÈå¢ÂåÖ ‚Üí`,
    useSuietForSigning: `Ë´ã‰ΩøÁî®ÊÇ®ÁöÑÈå¢ÂåÖÈÄ≤Ë°åÂÆâÂÖ®Ê∂àÊÅØÁ∞ΩÂêç`,
    autoSigning: `Ê≠£Âú®Ëá™ÂãïÁ∞ΩÁΩ≤‰ªäÊó•Ë®™Âïè... ‚ú®`,
    transitioningToZodiac: `Ê≠£Âú®ËΩâÊèõÂà∞ÊòüÂ∫ßÈÅ∏Êìá...`,
    wallet: `Èå¢ÂåÖ`,
    
    // Loading States
    connecting: `ÈÄ£Êé•‰∏≠...`,
    signing: `Á∞ΩÂêç‰∏≠...`,
    loading: `Âä†Ëºâ‰∏≠...`,
    
    // Testnet Education
    testnetDisclaimer: `üß™ Ê≠§ÊáâÁî®‰ΩøÁî®SuiÊ∏¨Ë©¶Á∂≤`,
    testnetExplainer: `Ê∏¨Ë©¶Á∂≤‰ª£Âπ£Ê≤íÊúâÁúüÂØ¶Ë≤®Âπ£ÂÉπÂÄº„ÄÇÈÄôÊòØ‰∏ÄÂÄãÂÆâÂÖ®ÁöÑÁí∞Â¢É‰æÜÂ≠∏ÁøíÂíåË≥∫ÂèñËôõÊì¨$HORO‰ª£Âπ£ÔºÅ`,
    learnMoreSuiet: `‰∫ÜËß£Â¶Ç‰ΩïÂÆâË£ùÈå¢ÂåÖ`,
    needHelp: `ÈúÄË¶ÅÂπ´Âä©Ôºü`,
    
    // Gas Management
    gasLow: `‚õΩ GasÈ§òÈ°ç‰∏çË∂≥`,
    gasNeeded: `Ë´ãÂêëÊÇ®ÁöÑÈå¢ÂåÖÊ∑ªÂä†Ê∏¨Ë©¶Á∂≤SUIÈÄ≤Ë°å‰∫§Êòì`,
    getFreeGas: `ÊâìÈñãÊ∏¨Ë©¶Á∂≤Ê∞¥ÈæçÈ†≠`,
    gettingGas: `Ê≠£Âú®ÊâìÈñãÊ∞¥ÈæçÈ†≠...`,
    gasSuccess: `‚úÖ ÂÖçË≤ªÊ∏¨Ë©¶Á∂≤SUIÂ∑≤Ê∑ªÂä†Âà∞ÊÇ®ÁöÑÈå¢ÂåÖÔºÅ`,
    gasError: `‚ùå ÊâìÈñãÊ∞¥ÈæçÈ†≠Â§±Êïó„ÄÇË´ãÊâãÂãïË®™Âïèfaucet.testnet.sui.io„ÄÇ`,
    gasBalance: `GasÈ§òÈ°ç`,
    sufficientGas: `‚úÖ ‰∫§ÊòìGasÂÖÖË∂≥`,
    
    // Footer
    about: `ÈóúÊñº`,
    tokenomics: `‰ª£Âπ£Á∂ìÊøü`,
    help: `Âπ´Âä©`,
    reset: `ÈáçÁΩÆ`,
    
    // Claim Status Messages
    alreadyClaimedToday: `‰ªäÊó•Â∑≤È†òÂèñÔºÅ`,
    alreadyClaimedMessage: `ÊÇ®Â∑≤Áç≤Âæó‰ªäÊó•$HOROÔºÅÊòéÂ§©ÂÜç‰æÜ„ÄÇ`,
    nextClaimAvailable: `‰∏ãÊ¨°È†òÂèñÊôÇÈñìÔºöÊòéÂ§©`,
    claimTodaysHoro: `üéÅ È†òÂèñ‰ªäÊó•$HORO`,
    missedDays: `ÈåØÈÅéÁöÑÂ§©Êï∏`,
    completedDays: `ÂÆåÊàêÁöÑÂ§©Êï∏`,
    claimedAmountToday: `‰ªäÊó•Â∑≤È†òÂèñ{amount} $HOROÔºÅ`,
    completed: `Â∑≤ÂÆåÊàê`,
    missed: `Â∑≤ÈåØÈÅé`,
    available: `ÂèØÁî®`,
    future: `Êú™‰æÜ`,
    
    // Network Status
    connected: `Â∑≤ÈÄ£Êé•`,
    connectionVerified: `SuiÊ∏¨Ë©¶Á∂≤ÈÄ£Êé•Â∑≤È©óË≠â`,
    refreshStatus: `Âà∑Êñ∞ÁãÄÊÖã`,
    
    // Days of the Week
    sunday: `ÈÄ±Êó•`,
    monday: `ÈÄ±‰∏Ä`, 
    tuesday: `ÈÄ±‰∫å`,
    wednesday: `ÈÄ±‰∏â`,
    thursday: `ÈÄ±Âõõ`,
    friday: `ÈÄ±‰∫î`,
    saturday: `ÈÄ±ÂÖ≠`,
    
    // Zodiac Signs
    aries: `Áâ°ÁæäÂ∫ß`,
    taurus: `ÈáëÁâõÂ∫ß`, 
    gemini: `ÈõôÂ≠êÂ∫ß`,
    cancer: `Â∑®ËüπÂ∫ß`,
    leo: `ÁçÖÂ≠êÂ∫ß`,
    virgo: `ËôïÂ•≥Â∫ß`,
    libra: `Â§©Áß§Â∫ß`,
    scorpio: `Â§©Ë†çÂ∫ß`,
    sagittarius: `Â∞ÑÊâãÂ∫ß`,
    capricorn: `Êë©ÁæØÂ∫ß`,
    aquarius: `Ê∞¥Áì∂Â∫ß`,
    pisces: `ÈõôÈ≠öÂ∫ß`,
    
    // Chinese Zodiac
    rat: `Èº†`,
    ox: `Áâõ`,
    tiger: `Ëôé`, 
    rabbit: `ÂÖî`,
    dragon: `Èæç`,
    snake: `Ëõá`,
    horse: `È¶¨`,
    goat: `Áæä`,
    monkey: `Áå¥`,
    rooster: `Èõû`,
    dog: `Áãó`,
    pig: `Ë±¨`,
    
    // Elements
    water: `Ê∞¥`,
    earth: `Âúü`, 
    wood: `Êú®`,
    fire: `ÁÅ´`,
    metal: `Èáë`
  },
  pt: {
    // Main UI
    dailyHoro: `$HORO Di√°rio`,
    chooseZodiacSystem: `Escolha Seu Sistema Zodiacal`,
    chooseWesternZodiac: `Escolha Seu Signo Zodiacal Ocidental`,
    chooseChineseZodiac: `Escolha Seu Signo Zodiacal Chin√™s`,
    western: `Ocidental`,
    chinese: `Chin√™s`,
    weeklyProgress: `Progresso Semanal`,
    todayVisitRecorded: `‚úì Reivindica√ß√£o de hoje registrada!`,
    alreadyClaimedOnChain: `‚úÖ J√° reivindicado hoje (verificado na blockchain)`,
    dailyReading: `Leitura Di√°ria`,
    dailyReward: `Recompensa $HORO Di√°ria`,
    earnDailyHoro: `Ganhe {amount} $HORO hoje!`,
    todayRewardEarned: `‚úÖ {amount} $HORO de hoje ganhos!`,
    checkInToday: `Check-in e Ganhar $HORO`,
    checkingIn: `Ganhando $HORO...`,
    claiming: `Reivindicando...`,
    verifyingClaim: `Verificando status da reivindica√ß√£o...`,
    streakBonus: `B√¥nus de Sequ√™ncia`,
    daysStreak: `sequ√™ncia de {days} dias`,
    baseReward: `Recompensa base: {amount} $HORO`,
    bonusReward: `B√¥nus de sequ√™ncia: +{amount} $HORO`,
    totalDailyReward: `Total hoje: {amount} $HORO`,
    blockchainTransaction: `Isso criar√° uma transa√ß√£o blockchain e transferir√° tokens $HORO reais para sua carteira!`,
    rewardsClaimedTitle: `‚úÖ Recompensas Reivindicadas!`,
    rewardsClaimed: `Voc√™ j√° reivindicou seus tokens $HORO esta semana.`,
    comeBackMonday: `Volte na pr√≥xima segunda-feira para come√ßar uma nova semana!`,
    connectWalletButton: `Conectar Carteira`,
    connectWallet: `Conecte sua carteira para rastrear automaticamente suas visitas di√°rias e reivindicar recompensas $HORO!`,
    connectSuietWallet: `Conectar Carteira`,
    connectSuietWalletTitle: `Conectar Carteira`,
    connectSuietPrompt: `Conecte sua carteira para rastrear automaticamente suas visitas di√°rias e reivindicar recompensas $HORO com seguran√ßa criptogr√°fica!`,
    suietWalletSecure: `Carteira segura com assinatura de mensagens`,
    whySuiet: `Por que Conectar Carteira?`,
    suietBenefitSigning: `Suporta assinatura criptogr√°fica de mensagens`,
    suietBenefitSecurity: `Seguran√ßa aprimorada para airdrops de NFT`,
    suietBenefitFraud: `Previne fraude no check-in`,
    suietBenefitCompatibility: `Melhor compatibilidade com recursos $HORO`,
    dontHaveSuiet: `N√£o tem carteira?`,
    downloadSuiet: `Baixar Carteira ‚Üí`,
    useSuietForSigning: `Por favor use sua carteira para assinatura segura de mensagens`,
    autoSigning: `Assinando automaticamente a visita de hoje... ‚ú®`,
    transitioningToZodiac: `Transicionando para sele√ß√£o zodiacal...`,
    wallet: `Carteira`,
    
    // Loading States
    connecting: `Conectando...`,
    signing: `Assinando...`,
    loading: `Carregando...`,
    
    // Testnet Education
    testnetDisclaimer: `üß™ Este app usa Sui Testnet`,
    testnetExplainer: `Tokens testnet n√£o t√™m valor monet√°rio real. Este √© um ambiente seguro para aprender e ganhar tokens $HORO virtuais!`,
    learnMoreSuiet: `Aprenda como instalar carteira`,
    needHelp: `Precisa de ajuda?`,
    
    // Gas Management
    gasLow: `‚õΩ Saldo de Gas Baixo`,
    gasNeeded: `Por favor adicione SUI testnet √† sua carteira para transa√ß√µes`,
    getFreeGas: `Abrir Torneira Testnet`,
    gettingGas: `Abrindo torneira...`,
    gasSuccess: `‚úÖ SUI testnet gratuito adicionado √† sua carteira!`,
    gasError: `‚ùå Falha ao abrir torneira. Por favor visite faucet.testnet.sui.io manualmente.`,
    gasBalance: `Saldo de Gas`,
    sufficientGas: `‚úÖ Gas suficiente para transa√ß√µes`,
    
    // Footer
    about: `Sobre`,
    tokenomics: `Token√¥mica`,
    help: `Ajuda`,
    reset: `Resetar`,
    
    // Claim Status Messages
    alreadyClaimedToday: `J√° Reivindicado Hoje!`,
    alreadyClaimedMessage: `Voc√™ ganhou seu $HORO di√°rio! Volte amanh√£.`,
    nextClaimAvailable: `Pr√≥xima reivindica√ß√£o dispon√≠vel: Amanh√£`,
    claimTodaysHoro: `üéÅ Reivindicar $HORO de Hoje`,
    missedDays: `Dias Perdidos`,
    completedDays: `Dias Completados`,
    claimedAmountToday: `Reivindicados {amount} $HORO hoje!`,
    completed: `Completado`,
    missed: `Perdido`,
    available: `Dispon√≠vel`,
    future: `Futuro`,
    
    // Network Status
    connected: `Conectado`,
    connectionVerified: `Conex√£o com Sui Testnet verificada`,
    refreshStatus: `Atualizar Status`,
    
    // Days of the Week
    sunday: `Dom`,
    monday: `Seg`, 
    tuesday: `Ter`,
    wednesday: `Qua`,
    thursday: `Qui`,
    friday: `Sex`,
    saturday: `S√°b`,
    
    // Zodiac Signs
    aries: `√°ries`,
    taurus: `touro`, 
    gemini: `g√™meos`,
    cancer: `c√¢ncer`,
    leo: `le√£o`,
    virgo: `virgem`,
    libra: `libra`,
    scorpio: `escorpi√£o`,
    sagittarius: `sagit√°rio`,
    capricorn: `capric√≥rnio`,
    aquarius: `aqu√°rio`,
    pisces: `peixes`,
    
    // Chinese Zodiac
    rat: `rato`,
    ox: `boi`,
    tiger: `tigre`, 
    rabbit: `coelho`,
    dragon: `drag√£o`,
    snake: `serpente`,
    horse: `cavalo`,
    goat: `cabra`,
    monkey: `macaco`,
    rooster: `galo`,
    dog: `c√£o`,
    pig: `porco`,
    
    // Elements
    water: `√Ågua`,
    earth: `Terra`, 
    wood: `Madeira`,
    fire: `Fogo`,
    metal: `Metal`
  }
};

// Western Horoscopes with translations  
const $HOROSCOPES = {
  en: {
    aries: "The stars favor bold beginnings. Take action with confidence‚Äîfortune smiles on bravery.",
    taurus: "Patience plants seeds of prosperity. Your steady path leads to tangible rewards.",
    gemini: "Curiosity sparks connection. Share your ideas freely‚Äîyour words inspire others today.",
    cancer: "Your intuition leads you to emotional clarity. Protect your peace and trust your heart.",
    leo: "Your natural radiance shines brighter than ever. Step into leadership and claim your space.",
    virgo: "Small details hold big keys. Precision and diligence guide you toward meaningful success.",
    libra: "Balance brings blessings. Seek harmony in your relationships and abundance will follow.",
    scorpio: "Transformation is in the air. Embrace change and let go of what no longer serves you.",
    sagittarius: "Adventure calls. Take risks and follow your passions‚Äîthe universe favors the brave.",
    capricorn: "Hard work pays off. Your persistence lays the foundation for future triumphs.",
    aquarius: "Originality opens doors. Trust your unique vision and the world will take notice.",
    pisces: "Dreams reveal hidden truths. Let your intuition guide you toward inspired choices."
  },
  es: {
    aries: "Las estrellas favorecen los comienzos audaces. Act√∫a con confianza‚Äîla fortuna sonr√≠e a la valent√≠a.",
    taurus: "La paciencia planta semillas de prosperidad. Tu camino constante lleva a recompensas tangibles.",
    gemini: "La curiosidad enciende conexiones. Comparte tus ideas libremente‚Äîtus palabras inspiran a otros hoy.",
    cancer: "Tu intuici√≥n te lleva a la claridad emocional. Protege tu paz y conf√≠a en tu coraz√≥n.",
    leo: "Tu resplandor natural brilla m√°s que nunca. Asume el liderazgo y reclama tu espacio.",
    virgo: "Los peque√±os detalles guardan grandes claves. La precisi√≥n y diligencia te gu√≠an hacia el √©xito significativo.",
    libra: "El equilibrio trae bendiciones. Busca armon√≠a en tus relaciones y la abundancia seguir√°.",
    scorpio: "La transformaci√≥n est√° en el aire. Abraza el cambio y suelta lo que ya no te sirve.",
    sagittarius: "La aventura llama. Toma riesgos y sigue tus pasiones‚Äîel universo favorece a los valientes.",
    capricorn: "El trabajo duro da frutos. Tu persistencia sienta las bases para futuros triunfos.",
    aquarius: "La originalidad abre puertas. Conf√≠a en tu visi√≥n √∫nica y el mundo se dar√° cuenta.",
    pisces: "Los sue√±os revelan verdades ocultas. Deja que tu intuici√≥n te gu√≠e hacia decisiones inspiradas."
  },
  zh: {
    aries: "ÊòüËæ∞ÈùíÁùêÂãáÊï¢ÁöÑÂºÄÂßã„ÄÇÊª°ÊÄÄ‰ø°ÂøÉÂú∞Ë°åÂä®‚Äî‚ÄîÂπ∏ËøêÁú∑È°æÂãáÊï¢ËÄÖ„ÄÇ",
    taurus: "ËÄêÂøÉÊí≠‰∏ãÁπÅËç£ÁöÑÁßçÂ≠ê„ÄÇ‰Ω†Á®≥ÂÆöÁöÑÈÅìË∑ØÈÄöÂêëÂÆûË¥®ÁöÑÂõûÊä•„ÄÇ",
    gemini: "Â•ΩÂ•áÂøÉÁÇπÁáÉËøûÊé•„ÄÇËá™Áî±ÂàÜ‰∫´‰Ω†ÁöÑÊÉ≥Ê≥ï‚Äî‚Äî‰ªäÂ§©‰Ω†ÁöÑËØùËØ≠ÊøÄÂä±‰ªñ‰∫∫„ÄÇ",
    cancer: "‰Ω†ÁöÑÁõ¥ËßâÂºïÂØº‰Ω†Ëé∑ÂæóÊÉÖÊÑü‰∏äÁöÑÊ∏ÖÊô∞„ÄÇ‰øùÊä§‰Ω†ÁöÑÂπ≥ÈùôÔºåÁõ∏‰ø°‰Ω†ÁöÑÂøÉ„ÄÇ",
    leo: "‰Ω†Â§©ÁîüÁöÑÂÖâËæâÊØî‰ª•ÂæÄ‰ªª‰ΩïÊó∂ÂÄôÈÉΩÊõ¥Âä†Èó™ËÄÄ„ÄÇËµ∞ÂêëÈ¢ÜÂØºÂú∞‰ΩçÔºåÂç†ÊçÆ‰Ω†ÁöÑ‰ΩçÁΩÆ„ÄÇ",
    virgo: "Â∞èÁªÜËäÇËï¥Âê´Â§ßÂÖ≥ÈîÆ„ÄÇÁ≤æÁ°ÆÂíåÂã§Â•ãÂºïÂØº‰Ω†Ëµ∞ÂêëÊúâÊÑè‰πâÁöÑÊàêÂäü„ÄÇ",
    libra: "Âπ≥Ë°°Â∏¶Êù•Á•ùÁ¶è„ÄÇÂú®‰Ω†ÁöÑÂÖ≥Á≥ª‰∏≠ÂØªÊ±ÇÂíåË∞êÔºå‰∏∞ÁõõÂ∞ÜÈöè‰πãËÄåÊù•„ÄÇ",
    scorpio: "ÂèòÈù©Âú®Á©∫Ê∞î‰∏≠„ÄÇÊã•Êä±ÊîπÂèòÔºåÊîæ‰∏ã‰∏çÂÜç‰∏∫‰Ω†ÊúçÂä°ÁöÑ‰∏úË•ø„ÄÇ",
    sagittarius: "ÂÜíÈô©Âú®Âè¨Âî§„ÄÇÊâøÊãÖÈ£éÈô©ÔºåËøΩÈöè‰Ω†ÁöÑÊøÄÊÉÖ‚Äî‚ÄîÂÆáÂÆôÁú∑È°æÂãáÊï¢ËÄÖ„ÄÇ",
    capricorn: "Âä™ÂäõÂ∑•‰ΩúÂæóÂà∞ÂõûÊä•„ÄÇ‰Ω†ÁöÑÂùöÊåÅ‰∏∫Êú™Êù•ÁöÑËÉúÂà©Â•†ÂÆöÂü∫Á°Ä„ÄÇ",
    aquarius: "ÂéüÂàõÊÄßÊâìÂºÄÂ§ßÈó®„ÄÇÁõ∏‰ø°‰Ω†Áã¨ÁâπÁöÑÊÑøÊôØÔºå‰∏ñÁïå‰ºöÊ≥®ÊÑèÂà∞„ÄÇ",
    pisces: "Ê¢¶Â¢ÉÊè≠Á§∫ÈöêËóèÁöÑÁúüÁõ∏„ÄÇËÆ©‰Ω†ÁöÑÁõ¥ËßâÂºïÂØº‰Ω†ÂÅöÂá∫ÊúâÁÅµÊÑüÁöÑÈÄâÊã©„ÄÇ"
  },
  "zh-TR": {
    aries: "ÊòüËæ∞ÈùíÁùûÂãáÊï¢ÁöÑÈñãÂßã„ÄÇÊªøÊá∑‰ø°ÂøÉÂú∞Ë°åÂãï‚Äî‚ÄîÂπ∏ÈÅãÁú∑È°ßÂãáÊï¢ËÄÖ„ÄÇ",
    taurus: "ËÄêÂøÉÊí≠‰∏ãÁπÅÊ¶ÆÁöÑÁ®ÆÂ≠ê„ÄÇ‰Ω†Á©©ÂÆöÁöÑÈÅìË∑ØÈÄöÂêëÂØ¶Ë≥™ÁöÑÂõûÂ†±„ÄÇ",
    gemini: "Â•ΩÂ•áÂøÉÈªûÁáÉÈÄ£Êé•„ÄÇËá™Áî±ÂàÜ‰∫´‰Ω†ÁöÑÊÉ≥Ê≥ï‚Äî‚Äî‰ªäÂ§©‰Ω†ÁöÑË©±Ë™ûÊøÄÂãµ‰ªñ‰∫∫„ÄÇ",
    cancer: "‰Ω†ÁöÑÁõ¥Ë¶∫ÂºïÂ∞é‰Ω†Áç≤ÂæóÊÉÖÊÑü‰∏äÁöÑÊ∏ÖÊô∞„ÄÇ‰øùË≠∑‰Ω†ÁöÑÂπ≥ÈùúÔºåÁõ∏‰ø°‰Ω†ÁöÑÂøÉ„ÄÇ",
    leo: "‰Ω†Â§©ÁîüÁöÑÂÖâËºùÊØî‰ª•ÂæÄ‰ªª‰ΩïÊôÇÂÄôÈÉΩÊõ¥Âä†ÈñÉËÄÄ„ÄÇËµ∞ÂêëÈ†òÂ∞éÂú∞‰ΩçÔºåÂç†Êìö‰Ω†ÁöÑ‰ΩçÁΩÆ„ÄÇ",
    virgo: "Â∞èÁ¥∞ÁØÄËòäÂê´Â§ßÈóúÈçµ„ÄÇÁ≤æÁ¢∫ÂíåÂã§Â•ÆÂºïÂ∞é‰Ω†Ëµ∞ÂêëÊúâÊÑèÁæ©ÁöÑÊàêÂäü„ÄÇ",
    libra: "Âπ≥Ë°°Â∏∂‰æÜÁ•ùÁ¶è„ÄÇÂú®‰Ω†ÁöÑÈóú‰øÇ‰∏≠Â∞ãÊ±ÇÂíåË´ßÔºåË±êÁõõÂ∞áÈö®‰πãËÄå‰æÜ„ÄÇ",
    scorpio: "ËÆäÈù©Âú®Á©∫Ê∞£‰∏≠„ÄÇÊìÅÊä±ÊîπËÆäÔºåÊîæ‰∏ã‰∏çÂÜçÁÇ∫‰Ω†ÊúçÂãôÁöÑÊù±Ë•ø„ÄÇ",
    sagittarius: "ÂÜíÈö™Âú®Âè¨Âñö„ÄÇÊâøÊìîÈ¢®Èö™ÔºåËøΩÈö®‰Ω†ÁöÑÊøÄÊÉÖ‚Äî‚ÄîÂÆáÂÆôÁú∑È°ßÂãáÊï¢ËÄÖ„ÄÇ",
    capricorn: "Âä™ÂäõÂ∑•‰ΩúÂæóÂà∞ÂõûÂ†±„ÄÇ‰Ω†ÁöÑÂ†ÖÊåÅÁÇ∫Êú™‰æÜÁöÑÂãùÂà©Â•†ÂÆöÂü∫Á§é„ÄÇ",
    aquarius: "ÂéüÂâµÊÄßÊâìÈñãÂ§ßÈñÄ„ÄÇÁõ∏‰ø°‰Ω†Áç®ÁâπÁöÑÈ°òÊôØÔºå‰∏ñÁïåÊúÉÊ≥®ÊÑèÂà∞„ÄÇ",
    pisces: "Â§¢Â¢ÉÊè≠Á§∫Èö±ËóèÁöÑÁúüÁõ∏„ÄÇËÆì‰Ω†ÁöÑÁõ¥Ë¶∫ÂºïÂ∞é‰Ω†ÂÅöÂá∫ÊúâÈùàÊÑüÁöÑÈÅ∏Êìá„ÄÇ"
  },
  ru: {
    aries: "–ó–≤–µ–∑–¥—ã –±–ª–∞–≥–æ–≤–æ–ª—è—Ç —Å–º–µ–ª—ã–º –Ω–∞—á–∏–Ω–∞–Ω–∏—è–º. –î–µ–π—Å—Ç–≤—É–π—Ç–µ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é‚Äî—É–¥–∞—á–∞ —É–ª—ã–±–∞–µ—Ç—Å—è —Ö—Ä–∞–±—Ä–æ—Å—Ç–∏.",
    taurus: "–¢–µ—Ä–ø–µ–Ω–∏–µ —Å–µ–µ—Ç —Å–µ–º–µ–Ω–∞ –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—è. –í–∞—à —É—Å—Ç–æ–π—á–∏–≤—ã–π –ø—É—Ç—å –≤–µ–¥–µ—Ç –∫ –æ—Å—è–∑–∞–µ–º—ã–º –Ω–∞–≥—Ä–∞–¥–∞–º.",
    gemini: "–õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ –∑–∞–∂–∏–≥–∞–µ—Ç —Å–≤—è–∑–∏. –î–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –∏–¥–µ—è–º–∏ —Å–≤–æ–±–æ–¥–Ω–æ‚Äî–≤–∞—à–∏ —Å–ª–æ–≤–∞ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—Ç –¥—Ä—É–≥–∏—Ö —Å–µ–≥–æ–¥–Ω—è.",
    cancer: "–í–∞—à–∞ –∏–Ω—Ç—É–∏—Ü–∏—è –≤–µ–¥–µ—Ç –≤–∞—Å –∫ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —è—Å–Ω–æ—Å—Ç–∏. –ó–∞—â–∏—â–∞–π—Ç–µ —Å–≤–æ–π –ø–æ–∫–æ–π –∏ –¥–æ–≤–µ—Ä—è–π—Ç–µ —Å–≤–æ–µ–º—É —Å–µ—Ä–¥—Ü—É.",
    leo: "–í–∞—à–µ –ø—Ä–∏—Ä–æ–¥–Ω–æ–µ —Å–∏—è–Ω–∏–µ —Å–≤–µ—Ç–∏—Ç —è—Ä—á–µ —á–µ–º –∫–æ–≥–¥–∞-–ª–∏–±–æ. –ó–∞–π–º–∏—Ç–µ –ª–∏–¥–µ—Ä—Å–∫—É—é –ø–æ–∑–∏—Ü–∏—é –∏ –∑–∞—è–≤–∏—Ç–µ –æ —Å–µ–±–µ.",
    virgo: "–ú–∞–ª–µ–Ω—å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ —Ö—Ä–∞–Ω—è—Ç –±–æ–ª—å—à–∏–µ –∫–ª—é—á–∏. –¢–æ—á–Ω–æ—Å—Ç—å –∏ —É—Å–µ—Ä–¥–∏–µ –≤–µ–¥—É—Ç –≤–∞—Å –∫ –∑–Ω–∞—á–∏–º–æ–º—É —É—Å–ø–µ—Ö—É.",
    libra: "–ë–∞–ª–∞–Ω—Å –ø—Ä–∏–Ω–æ—Å–∏—Ç –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è. –ò—â–∏—Ç–µ –≥–∞—Ä–º–æ–Ω–∏—é –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∏ –∏–∑–æ–±–∏–ª–∏–µ –ø–æ—Å–ª–µ–¥—É–µ—Ç.",
    scorpio: "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∏—Ç–∞–µ—Ç –≤ –≤–æ–∑–¥—É—Ö–µ. –ü—Ä–∏–º–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω—ã –∏ –æ—Ç–ø—É—Å—Ç–∏—Ç–µ —Ç–æ, —á—Ç–æ –±–æ–ª—å—à–µ –≤–∞–º –Ω–µ —Å–ª—É–∂–∏—Ç.",
    sagittarius: "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∑–æ–≤—É—Ç. –†–∏—Å–∫—É–π—Ç–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ —Å–≤–æ–∏–º —Å—Ç—Ä–∞—Å—Ç—è–º‚Äî–≤—Å–µ–ª–µ–Ω–Ω–∞—è –±–ª–∞–≥–æ–≤–æ–ª–∏—Ç —Å–º–µ–ª—ã–º.",
    capricorn: "–¢—è–∂–µ–ª–∞—è —Ä–∞–±–æ—Ç–∞ –æ–∫—É–ø–∞–µ—Ç—Å—è. –í–∞—à–∞ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∑–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤—É –¥–ª—è –±—É–¥—É—â–∏—Ö —Ç—Ä–∏—É–º—Ñ–æ–≤.",
    aquarius: "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–≤–µ—Ä–∏. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–º—É —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –≤–∏–¥–µ–Ω–∏—é –∏ –º–∏—Ä –∑–∞–º–µ—Ç–∏—Ç.",
    pisces: "–°–Ω—ã —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Ç —Å–∫—Ä—ã—Ç—ã–µ –∏—Å—Ç–∏–Ω—ã. –ü–æ–∑–≤–æ–ª—å—Ç–µ –∏–Ω—Ç—É–∏—Ü–∏–∏ –≤–µ—Å—Ç–∏ –≤–∞—Å –∫ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–∞–º."
  },
  fr: {
    aries: "Les √©toiles favorisent les commencements audacieux. Agissez avec confiance‚Äîla fortune sourit au courage.",
    taurus: "La patience plante des graines de prosp√©rit√©. Votre chemin stable m√®ne √† des r√©compenses tangibles.",
    gemini: "La curiosit√© allume les connexions. Partagez vos id√©es librement‚Äîvos mots inspirent les autres aujourd'hui.",
    cancer: "Votre intuition vous m√®ne √† la clart√© √©motionnelle. Prot√©gez votre paix et faites confiance √† votre c≈ìur.",
    leo: "Votre rayonnement naturel brille plus que jamais. Prenez les devants et r√©clamez votre espace.",
    virgo: "Les petits d√©tails d√©tiennent de grandes cl√©s. La pr√©cision et la diligence vous guident vers un succ√®s significatif.",
    libra: "L'√©quilibre apporte des b√©n√©dictions. Cherchez l'harmonie dans vos relations et l'abondance suivra.",
    scorpio: "La transformation est dans l'air. Embrassez le changement et l√¢chez ce qui ne vous sert plus.",
    sagittarius: "L'aventure appelle. Prenez des risques et suivez vos passions‚Äîl'univers favorise les courageux.",
    capricorn: "Le travail acharn√© porte ses fruits. Votre persistance pose les fondations pour de futurs triomphes.",
    aquarius: "L'originalit√© ouvre les portes. Faites confiance √† votre vision unique et le monde le remarquera.",
    pisces: "Les r√™ves r√©v√®lent des v√©rit√©s cach√©es. Laissez votre intuition vous guider vers des choix inspir√©s."
  },
  pt: {
    aries: "As estrelas favorecem come√ßos corajosos. Aja com confian√ßa‚Äîa fortuna sorri para a bravura.",
    taurus: "A paci√™ncia planta sementes de prosperidade. Seu caminho firme leva a recompensas tang√≠veis.",
    gemini: "A curiosidade desperta conex√µes. Compartilhe suas ideias livremente‚Äîsuas palavras inspiram outros hoje.",
    cancer: "Sua intui√ß√£o te leva √† clareza emocional. Proteja sua paz e confie em seu cora√ß√£o.",
    leo: "Seu brilho natural resplandece mais do que nunca. Assuma a lideran√ßa e reivindique seu espa√ßo.",
    virgo: "Pequenos detalhes guardam grandes chaves. Precis√£o e dilig√™ncia te guiam ao sucesso significativo.",
    libra: "O equil√≠brio traz b√™n√ß√£os. Busque harmonia em seus relacionamentos e a abund√¢ncia seguir√°.",
    scorpio: "A transforma√ß√£o est√° no ar. Abrace a mudan√ßa e solte o que n√£o te serve mais.",
    sagittarius: "A aventura chama. Corra riscos e siga suas paix√µes‚Äîo universo favorece os corajosos.",
    capricorn: "O trabalho duro compensa. Sua persist√™ncia estabelece a base para futuros triunfos.",
    aquarius: "A originalidade abre portas. Confie em sua vis√£o √∫nica e o mundo notar√°.",
    pisces: "Os sonhos revelam verdades ocultas. Deixe sua intui√ß√£o te guiar para escolhas inspiradas."
  }
};

// Chinese Horoscopes with translations
const CHINESE_$HOROSCOPES = {
  en: {
    rat: `Your quick wit and resourcefulness will lead to success today.`,
    ox: `Your strength and determination will help you overcome any obstacles.`,
    tiger: `Your natural leadership and courage will inspire others today.`,
    rabbit: `Your gentle nature and intuition will guide you to harmony.`,
    dragon: `Your powerful energy and charisma will attract good fortune.`,
    snake: `Your wisdom and insight will reveal hidden opportunities.`,
    horse: `Your energy and enthusiasm will drive you toward your goals.`,
    goat: `Your creativity and kindness will bring joy to those around you.`,
    monkey: `Your cleverness and adaptability will solve complex problems.`,
    rooster: `Your confidence and precision will lead to achievement.`,
    dog: `Your loyalty and honesty will strengthen important relationships.`,
    pig: `Your generosity and optimism will attract abundance.`
  },
  es: {
    rat: `Tu ingenio r√°pido y recursividad te llevar√°n al √©xito hoy.`,
    ox: `Tu fuerza y determinaci√≥n te ayudar√°n a superar cualquier obst√°culo.`,
    tiger: `Tu liderazgo natural y coraje inspirar√°n a otros hoy.`,
    rabbit: `Tu naturaleza gentil e intuici√≥n te guiar√°n hacia la armon√≠a.`,
    dragon: `Tu energ√≠a poderosa y carisma atraer√°n buena fortuna.`,
    snake: `Tu sabidur√≠a y perspicacia revelar√°n oportunidades ocultas.`,
    horse: `Tu energ√≠a y entusiasmo te llevar√°n hacia tus metas.`,
    goat: `Tu creatividad y bondad traer√°n alegr√≠a a quienes te rodean.`,
    monkey: `Tu astucia y adaptabilidad resolver√°n problemas complejos.`,
    rooster: `Tu confianza y precisi√≥n te llevar√°n al logro.`,
    dog: `Tu lealtad y honestidad fortalecer√°n relaciones importantes.`,
    pig: `Tu generosidad y optimismo atraer√°n abundancia.`
  },
  zh: {
    rat: `‰Ω†ÁöÑÊú∫Êô∫ÂíåË∂≥Êô∫Â§öË∞ã‰ªäÂ§©Â∞ÜÂºïÈ¢Ü‰Ω†Ëµ∞ÂêëÊàêÂäü„ÄÇ`,
    ox: `‰Ω†ÁöÑÂäõÈáèÂíåÂÜ≥ÂøÉÂ∞ÜÂ∏ÆÂä©‰Ω†ÂÖãÊúç‰ªª‰ΩïÈöúÁ¢ç„ÄÇ`,
    tiger: `‰Ω†Â§©ÁîüÁöÑÈ¢ÜÂØºÂäõÂíåÂãáÊ∞î‰ªäÂ§©Â∞ÜÊøÄÂä±‰ªñ‰∫∫„ÄÇ`,
    rabbit: `‰Ω†Ê∏©ÂíåÁöÑÂ§©ÊÄßÂíåÁõ¥ËßâÂ∞ÜÂºïÂØº‰Ω†Ëµ∞ÂêëÂíåË∞ê„ÄÇ`,
    dragon: `‰Ω†Âº∫Â§ßÁöÑËÉΩÈáèÂíåÈ≠ÖÂäõÂ∞ÜÂê∏ÂºïÂ•ΩËøê„ÄÇ`,
    snake: `‰Ω†ÁöÑÊô∫ÊÖßÂíåÊ¥ûÂØüÂäõÂ∞ÜÊè≠Á§∫ÈöêËóèÁöÑÊú∫‰ºö„ÄÇ`,
    horse: `‰Ω†ÁöÑÊ¥ªÂäõÂíåÁÉ≠ÊÉÖÂ∞ÜÊé®Âä®‰Ω†ÊúùÁùÄÁõÆÊ†áÂâçËøõ„ÄÇ`,
    goat: `‰Ω†ÁöÑÂàõÈÄ†ÂäõÂíåÂñÑËâØÂ∞ÜÁªôÂë®Âõ¥ÁöÑ‰∫∫Â∏¶Êù•Âø´‰πê„ÄÇ`,
    monkey: `‰Ω†ÁöÑËÅ™ÊòéÂíåÈÄÇÂ∫îËÉΩÂäõÂ∞ÜËß£ÂÜ≥Â§çÊùÇÁöÑÈóÆÈ¢ò„ÄÇ`,
    rooster: `‰Ω†ÁöÑËá™‰ø°ÂíåÁ≤æÁ°ÆÂ∞ÜÂºïÈ¢Ü‰Ω†ÂèñÂæóÊàêÂ∞±„ÄÇ`,
    dog: `‰Ω†ÁöÑÂø†ËØöÂíåËØöÂÆûÂ∞ÜÂä†Âº∫ÈáçË¶ÅÁöÑÂÖ≥Á≥ª„ÄÇ`,
    pig: `‰Ω†ÁöÑÊÖ∑ÊÖ®Âíå‰πêËßÇÂ∞ÜÂê∏Âºï‰∏∞Áõõ„ÄÇ`
  },
  'zh-TR': {
    rat: `‰Ω†ÁöÑÊ©üÊô∫ÂíåË∂≥Êô∫Â§öË¨Ä‰ªäÂ§©Â∞áÂºïÈ†ò‰Ω†Ëµ∞ÂêëÊàêÂäü„ÄÇ`,
    ox: `‰Ω†ÁöÑÂäõÈáèÂíåÊ±∫ÂøÉÂ∞áÂπ´Âä©‰Ω†ÂÖãÊúç‰ªª‰ΩïÈöúÁ§ô„ÄÇ`,
    tiger: `‰Ω†Â§©ÁîüÁöÑÈ†òÂ∞éÂäõÂíåÂãáÊ∞£‰ªäÂ§©Â∞áÊøÄÂãµ‰ªñ‰∫∫„ÄÇ`,
    rabbit: `‰Ω†Ê∫´ÂíåÁöÑÂ§©ÊÄßÂíåÁõ¥Ë¶∫Â∞áÂºïÂ∞é‰Ω†Ëµ∞ÂêëÂíåË´ß„ÄÇ`,
    dragon: `‰Ω†Âº∑Â§ßÁöÑËÉΩÈáèÂíåÈ≠ÖÂäõÂ∞áÂê∏ÂºïÂ•ΩÈÅã„ÄÇ`,
    snake: `‰Ω†ÁöÑÊô∫ÊÖßÂíåÊ¥ûÂØüÂäõÂ∞áÊè≠Á§∫Èö±ËóèÁöÑÊ©üÊúÉ„ÄÇ`,
    horse: `‰Ω†ÁöÑÊ¥ªÂäõÂíåÁÜ±ÊÉÖÂ∞áÊé®Âãï‰Ω†ÊúùËëóÁõÆÊ®ôÂâçÈÄ≤„ÄÇ`,
    goat: `‰Ω†ÁöÑÂâµÈÄ†ÂäõÂíåÂñÑËâØÂ∞áÁµ¶Âë®ÂúçÁöÑ‰∫∫Â∏∂‰æÜÂø´Ê®Ç„ÄÇ`,
    monkey: `‰Ω†ÁöÑËÅ∞ÊòéÂíåÈÅ©ÊáâËÉΩÂäõÂ∞áËß£Ê±∫Ë§áÈõúÁöÑÂïèÈ°å„ÄÇ`,
    rooster: `‰Ω†ÁöÑËá™‰ø°ÂíåÁ≤æÁ¢∫Â∞áÂºïÈ†ò‰Ω†ÂèñÂæóÊàêÂ∞±„ÄÇ`,
    dog: `‰Ω†ÁöÑÂø†Ë™†ÂíåË™†ÂØ¶Â∞áÂä†Âº∑ÈáçË¶ÅÁöÑÈóú‰øÇ„ÄÇ`,
    pig: `‰Ω†ÁöÑÊÖ∑ÊÖ®ÂíåÊ®ÇËßÄÂ∞áÂê∏ÂºïË±êÁõõ„ÄÇ`
  },
  ru: {
    rat: `–¢–≤–æ–π –±—ã—Å—Ç—Ä—ã–π —É–º –∏ –Ω–∞—Ö–æ–¥—á–∏–≤–æ—Å—Ç—å –ø—Ä–∏–≤–µ–¥—É—Ç –∫ —É—Å–ø–µ—Ö—É —Å–µ–≥–æ–¥–Ω—è.`,
    ox: `–¢–≤–æ—è —Å–∏–ª–∞ –∏ —Ä–µ—à–∏–º–æ—Å—Ç—å –ø–æ–º–æ–≥—É—Ç –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –ª—é–±—ã–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è.`,
    tiger: `–¢–≤–æ–µ –ø—Ä–∏—Ä–æ–¥–Ω–æ–µ –ª–∏–¥–µ—Ä—Å—Ç–≤–æ –∏ —Å–º–µ–ª–æ—Å—Ç—å –≤–¥–æ—Ö–Ω–æ–≤—è—Ç –¥—Ä—É–≥–∏—Ö —Å–µ–≥–æ–¥–Ω—è.`,
    rabbit: `–¢–≤–æ—è –º—è–≥–∫–∞—è –Ω–∞—Ç—É—Ä–∞ –∏ –∏–Ω—Ç—É–∏—Ü–∏—è –ø—Ä–∏–≤–µ–¥—É—Ç —Ç–µ–±—è –∫ –≥–∞—Ä–º–æ–Ω–∏–∏.`,
    dragon: `–¢–≤–æ—è –º–æ—â–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –∏ —Ö–∞—Ä–∏–∑–º–∞ –ø—Ä–∏–≤–ª–µ–∫—É—Ç —É–¥–∞—á—É.`,
    snake: `–¢–≤–æ—è –º—É–¥—Ä–æ—Å—Ç—å –∏ –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å–∫—Ä–æ—é—Ç —Å–∫—Ä—ã—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.`,
    horse: `–¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è –∏ —ç–Ω—Ç—É–∑–∏–∞–∑–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç —Ç–µ–±—è –∫ —Ü–µ–ª—è–º.`,
    goat: `–¢–≤–æ—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –¥–æ–±—Ä–æ—Ç–∞ –ø—Ä–∏–Ω–µ—Å—É—Ç —Ä–∞–¥–æ—Å—Ç—å –æ–∫—Ä—É–∂–∞—é—â–∏–º.`,
    monkey: `–¢–≤–æ—è —Å–æ–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ—à–∞—Ç —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.`,
    rooster: `–¢–≤–æ—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–∏–≤–µ–¥—É—Ç –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º.`,
    dog: `–¢–≤–æ—è –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å –∏ —á–µ—Å—Ç–Ω–æ—Å—Ç—å —É–∫—Ä–µ–ø—è—Ç –≤–∞–∂–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.`,
    pig: `–¢–≤–æ—è —â–µ–¥—Ä–æ—Å—Ç—å –∏ –æ–ø—Ç–∏–º–∏–∑–º –ø—Ä–∏–≤–ª–µ–∫—É—Ç –∏–∑–æ–±–∏–ª–∏–µ.`
  },
  fr: {
    rat: `Ton esprit vif et ta d√©brouillardise m√®neront au succ√®s aujourd'hui.`,
    ox: `Ta force et ta d√©termination t'aideront √† surmonter tous les obstacles.`,
    tiger: `Ton leadership naturel et ton courage inspireront les autres aujourd'hui.`,
    rabbit: `Ta nature douce et ton intuition te guideront vers l'harmonie.`,
    dragon: `Ton √©nergie puissante et ton charisme attireront la bonne fortune.`,
    snake: `Ta sagesse et ton aper√ßu r√©v√©leront des opportunit√©s cach√©es.`,
    horse: `Ton √©nergie et ton enthousiasme te pousseront vers tes objectifs.`,
    goat: `Ta cr√©ativit√© et ta gentillesse apporteront de la joie √† ton entourage.`,
    monkey: `Ton intelligence et ton adaptabilit√© r√©soudront des probl√®mes complexes.`,
    rooster: `Ta confiance et ta pr√©cision m√®neront √† la r√©ussite.`,
    dog: `Ta loyaut√© et ton honn√™tet√© renforceront les relations importantes.`,
    pig: `Ta g√©n√©rosit√© et ton optimisme attireront l'abondance.`
  }
};

// Modal translations
const MODAL_TRANSLATIONS = {
  en: {
    aboutHoro: `‚ÅâÔ∏è About $HORO`,
    whatIsHoro: `üß≠ What`,
    whatIsHoroText: `$HORO is a Web3 horoscope dApp built on the Sui testnet. Users receive free $HORO tokens for checking their horoscope ‚Äî no purchases, no gas fees, no crypto knowledge required.\n\nThis is a fun and educational token with no financial utility or speculative value. Just read your stars, sign your wallet, and enjoy the beginning of a magical, star-powered Web3 journey!`,
    whereIsHoro: `üåç Where`, 
    whereIsHoroText: `$HORO lives on horocoin.com and runs entirely on the Sui testnet. Tokens are distributed through our dApp and used only in our Web3 learning ecosystem.`,
    whenIsHoro: `üìÖ When`,
    whenIsHoroText: `$HORO runs continuously with:\n‚Ä¢ Daily check-ins: Read your horoscope and connect your wallet.\n‚Ä¢ Instant rewards: Claim your $HORO tokens immediately when you check in.\n‚Ä¢ Streak bonuses: Longer daily streaks earn bigger rewards.`,
    whatsNext: `üîÆ What's Next`,
    whatsNextText: `We're continuously expanding $HORO to include more astrological traditions from around the world. Our roadmap includes adding Vedic astrology, Mayan astrology, Celtic astrology, and many other cultural zodiac systems to ensure all traditions are properly represented and honored.`,
    whyHoro: `ü§î Why`,
    whyHoroText: `$HORO exists to introduce astrology lovers and Web2 users to the basics of Web3 in a fun, low-pressure way. No trading, no volatility, just habit-forming, blockchain-powered cosmic interplay.`,
    
    // Tokenomics
    tokenomics: `üí∞ $HORO Tokenomics`,
    totalSupplyTitle: `üì¶ Total Supply`,
    totalSupply: `10T $HORO`,
    fixedSupply: `Fixed total supply. Minted once, no inflation, no reminting.`,
    allocationBreakdown: `üßÆ Allocation Breakdown`,
    dailyClaims: `Daily Claims`,
    contractAddress: `Contract Address`,
    dailyClaimsAmount: `10T tokens`,
    totalSupplyAmount: `10T tokens`,
    
    // Help
    help: `Help`,
    helpTitle: `üí° Help & Support`,
    switchToTestnet: `üîÑ Switch Wallet to Testnet`,
    switchToTestnetText: `To use this app, your wallet must be connected to Sui Testnet:\n\n1. Open your wallet extension\n2. Click the network dropdown (usually shows 'Mainnet')\n3. Select 'Testnet' from the list\n4. Refresh this page and reconnect your wallet\n\nIf you don't see Testnet option, make sure you have the latest version of your wallet.`,
    needTestnetSui: `üíß Need Testnet SUI?`,
    needTestnetSuiText: `Testnet SUI tokens are free and needed for gas fees:\n\n1. Copy your wallet address from your wallet\n2. Visit: faucet.testnet.sui.io\n3. Paste your address and request SUI\n4. Wait 30 seconds for tokens to arrive\n\nYou only need to do this once - a small amount lasts for many transactions.`,
    troubleshooting: `üîß Troubleshooting`,
    troubleshootingText: `Common issues and solutions:\n\n‚Ä¢ Wallet won't connect: Make sure your wallet is installed and unlocked\n‚Ä¢ Claims not working: Check you're on Testnet and have gas\n‚Ä¢ Progress not showing: Refresh page and reconnect wallet\n‚Ä¢ Missing tokens: Verify network and check faucet\n\nStill having trouble? This is a testnet app for learning - no real money involved!`
  },
  es: {
    aboutHoro: `‚ùì Acerca de $HORO`,
    whatIsHoro: `üß≠ Qu√©`,
    whatIsHoroText: `$HORO es una dApp de hor√≥scopo Web3 construida en la testnet de Sui. Los usuarios reciben tokens $HORO gratuitos por consultar su hor√≥scopo ‚Äî sin compras, sin tarifas de gas, sin conocimiento de cripto requerido.\n\nEste es un token divertido y educativo sin utilidad financiera o valor especulativo. Solo lee tus estrellas, firma con tu billetera y disfruta de un viaje m√°gico Web3.`,
    whereIsHoro: `üåç D√≥nde`,
    whereIsHoroText: `$HORO vive en horocoin.com y funciona completamente en la testnet de Sui. Los tokens se distribuyen a trav√©s de nuestra dApp y se usan solo en nuestro ecosistema de aprendizaje Web3.`,
    whenIsHoro: `üìÖ Cu√°ndo`,
    whenIsHoroText: `$HORO funciona continuamente con:\n‚Ä¢ Registros diarios: Lee tu hor√≥scopo y conecta tu billetera.\n‚Ä¢ Recompensas instant√°neas: Reclama tus tokens $HORO inmediatamente al registrarte.\n‚Ä¢ Bonos de racha: Las rachas diarias m√°s largas ganan mayores recompensas.`,
    whatsNext: `üîÆ Qu√© Sigue`,
    whatsNextText: `Estamos expandiendo continuamente $HORO para incluir m√°s tradiciones astrol√≥gicas de todo el mundo. Nuestra hoja de ruta incluye agregar astrolog√≠a v√©dica, astrolog√≠a maya, astrolog√≠a celta y muchos otros sistemas zodiacales culturales para asegurar que todas las tradiciones est√©n adecuadamente representadas y honradas.`,
    whyHoro: `ü§î Por qu√©`,
    whyHoroText: `$HORO existe para introducir a los amantes de la astrolog√≠a y usuarios Web2 a los conceptos b√°sicos de Web3 de una manera divertida y sin presi√≥n. Sin comercio, sin volatilidad, solo juego c√≥smico que forma h√°bitos.`,
    
    // Tokenomics
    tokenomics: `üí∞ Token√≥mica de $HORO`,
    totalSupplyTitle: `üì¶ Suministro Total`,
    totalSupply: `10T $HORO`,
    fixedSupply: `Suministro total fijo. Acu√±ado una vez, sin inflaci√≥n, sin re-acu√±aci√≥n.`,
    allocationBreakdown: `üßÆ Desglose de Asignaci√≥n`,
    dailyClaims: `Reclamos Diarios`,
    contractAddress: `Direcci√≥n del Contrato`,
    dailyClaimsAmount: `10T tokens`,
    totalSupplyAmount: `10T tokens`,
    
    // Help
    help: `Ayuda`,
    helpTitle: `üí° Ayuda y Soporte`,
    switchToTestnet: `üîÑ Cambiar Billetera a Testnet`,
    switchToTestnetText: `Para usar esta app, tu billetera debe estar conectada a Sui Testnet:\n\n1. Abre tu extensi√≥n de billetera\n2. Haz clic en el men√∫ de red (normalmente muestra 'Mainnet')\n3. Selecciona 'Testnet' de la lista\n4. Actualiza esta p√°gina y reconecta tu billetera\n\nSi no ves la opci√≥n Testnet, aseg√∫rate de tener la √∫ltima versi√≥n de tu billetera.`,
    needTestnetSui: `üíß ¬øNecesitas SUI de Testnet?`,
    needTestnetSuiText: `Los tokens SUI de testnet son gratuitos y necesarios para las tarifas de gas:\n\n1. Copia tu direcci√≥n de billetera desde tu billetera\n2. Visita: faucet.testnet.sui.io\n3. Pega tu direcci√≥n y solicita SUI\n4. Espera 30 segundos para que lleguen los tokens\n\nSolo necesitas hacer esto una vez - una peque√±a cantidad dura para muchas transacciones.`,
    troubleshooting: `üîß Soluci√≥n de Problemas`,
    troubleshootingText: `Problemas comunes y soluciones:\n\n‚Ä¢ La billetera no se conecta: Aseg√∫rate de que tu billetera est√© instalada y desbloqueada\n‚Ä¢ Los reclamos no funcionan: Verifica que est√©s en Testnet y tengas gas\n‚Ä¢ El progreso no se muestra: Actualiza la p√°gina y reconecta la billetera\n‚Ä¢ Tokens faltantes: Verifica la red y revisa el faucet\n\n¬øSigues teniendo problemas? Esta es una app de testnet para aprender - ¬°no hay dinero real involucrado!`
  },
  zh: {
    aboutHoro: `‚ùì ÂÖ≥‰∫é$HORO`,
    whatIsHoro: `üß≠ ‰ªÄ‰πà`,
    whatIsHoroText: `$HOROÊòØÂª∫Á´ãÂú®SuiÊµãËØïÁΩë‰∏äÁöÑWeb3ÊòüÂ∫ß‰ΩìÈ™å„ÄÇÁî®Êà∑ÈÄöËøáÊü•ÁúãÊòüÂ∫ßËé∑ÂæóÂÖçË¥πÁöÑ$HORO‰ª£Â∏Å‚Äî‚ÄîÊó†ÈúÄË¥≠‰π∞„ÄÅÊó†gasË¥πÁî®„ÄÅÊó†ÈúÄÂä†ÂØÜË¥ßÂ∏ÅÁü•ËØÜ„ÄÇ\n\nËøôÊòØ‰∏Ä‰∏™ÊúâË∂£ÁöÑÊïôËÇ≤‰ª£Â∏ÅÔºåÊ≤°ÊúâÈáëËûçÁî®ÈÄîÊàñÊäïÊú∫‰ª∑ÂÄº„ÄÇÂè™ÈúÄÈòÖËØª‰Ω†ÁöÑÊòüÂ∫ßÔºåÁ≠æÁΩ≤‰Ω†ÁöÑÈí±ÂåÖÔºå‰∫´ÂèóÁ•ûÂ•áÁöÑWeb3‰πãÊóÖ„ÄÇ`,
    whereIsHoro: `üåç Âú®Âì™Èáå`,
    whereIsHoroText: `$HOROÂ≠òÂú®‰∫éhorocoin.comÔºåÂÆåÂÖ®Âú®SuiÊµãËØïÁΩë‰∏äËøêË°å„ÄÇ‰ª£Â∏ÅÈÄöËøáÊàë‰ª¨ÁöÑdAppÂàÜÂèëÔºå‰ªÖÂú®Êàë‰ª¨ÁöÑWeb3Â≠¶‰π†ÁîüÊÄÅÁ≥ªÁªü‰∏≠‰ΩøÁî®„ÄÇ`,
    whenIsHoro: `üìÖ ‰ªÄ‰πàÊó∂ÂÄô`,
    whenIsHoroText: `$HOROÊåÅÁª≠ËøêË°åÔºö\n‚Ä¢ ÊØèÊó•Á≠æÂà∞ÔºöÈòÖËØª‰Ω†ÁöÑÊòüÂ∫ßÂπ∂ËøûÊé•‰Ω†ÁöÑÈí±ÂåÖ„ÄÇ\n‚Ä¢ Âç≥Êó∂Â•ñÂä±ÔºöÁ≠æÂà∞Êó∂Á´ãÂç≥È¢ÜÂèñ‰Ω†ÁöÑ$HORO‰ª£Â∏Å„ÄÇ\n‚Ä¢ ËøûÁª≠Â•ñÂä±ÔºöÊõ¥ÈïøÁöÑÊØèÊó•ËøûÁª≠Â§©Êï∞Ëé∑ÂæóÊõ¥Â§ßÁöÑÂ•ñÂä±„ÄÇ`,
    whatsNext: `üîÆ Êé•‰∏ãÊù•`,
    whatsNextText: `Êàë‰ª¨Ê≠£Âú®‰∏çÊñ≠Êâ©Â±ï$HOROÔºå‰ª•ÂåÖÊã¨Êù•Ëá™‰∏ñÁïåÂêÑÂú∞ÁöÑÊõ¥Â§öÂç†Êòü‰º†Áªü„ÄÇÊàë‰ª¨ÁöÑË∑ØÁ∫øÂõæÂåÖÊã¨Â¢ûÂä†Âê†ÈôÄÂç†ÊòüÊúØ„ÄÅÁéõÈõÖÂç†ÊòüÊúØ„ÄÅÂáØÂ∞îÁâπÂç†ÊòüÊúØÂíåËÆ∏Â§öÂÖ∂‰ªñÊñáÂåñÊòüÂ∫ßÁ≥ªÁªüÔºå‰ª•Á°Æ‰øùÊâÄÊúâ‰º†ÁªüÈÉΩÂæóÂà∞ÈÄÇÂΩìÁöÑ‰ª£Ë°®ÂíåÂ∞äÈáç„ÄÇ`,
    whyHoro: `ü§î ‰∏∫‰ªÄ‰πà`,
    whyHoroText: `$HOROÁöÑÂ≠òÂú®ÊòØ‰∏∫‰∫Ü‰ª•ÊúâË∂£„ÄÅ‰ΩéÂéãÂäõÁöÑÊñπÂºèÂêëÊòüÂ∫ßÁà±Â•ΩËÄÖÂíåWeb2Áî®Êà∑‰ªãÁªçWeb3Âü∫Á°ÄÁü•ËØÜ„ÄÇÊ≤°Êúâ‰∫§ÊòìÔºåÊ≤°ÊúâÊ≥¢Âä®ÊÄßÔºåÂè™ÊòØÂΩ¢Êàê‰π†ÊÉØÁöÑÂÆáÂÆôÊ∏∏Êàè„ÄÇ`,
    
    // Tokenomics
    tokenomics: `üí∞ $HORO‰ª£Â∏ÅÁªèÊµéÂ≠¶`,
    totalSupplyTitle: `üì¶ ÊÄª‰æõÂ∫îÈáè`,
    totalSupply: `10‰∏á‰∫ø $HORO`,
    fixedSupply: `Âõ∫ÂÆöÊÄª‰æõÂ∫îÈáè„ÄÇ‰∏ÄÊ¨°Èì∏ÈÄ†ÔºåÊó†ÈÄöËÉÄÔºåÊó†ÈáçÊñ∞Èì∏ÈÄ†„ÄÇ`,
    allocationBreakdown: `üßÆ ÂàÜÈÖçÊòéÁªÜ`,
    dailyClaims: `ÊØèÊó•È¢ÜÂèñ`,
    contractAddress: `ÂêàÁ∫¶Âú∞ÂùÄ`,
    dailyClaimsAmount: `10‰∏á‰∫ø‰ª£Â∏Å`, 
    totalSupplyAmount: `10‰∏á‰∫ø‰ª£Â∏Å`,
    
    // Help
    help: `Â∏ÆÂä©`,
    helpTitle: `üí° Â∏ÆÂä©‰∏éÊîØÊåÅ`,
    switchToTestnet: `üîÑ Â∞ÜÈí±ÂåÖÂàáÊç¢Âà∞ÊµãËØïÁΩë`,
    switchToTestnetText: `Ë¶Å‰ΩøÁî®Ê≠§Â∫îÁî®ÔºåÊÇ®ÁöÑÈí±ÂåÖÂøÖÈ°ªËøûÊé•Âà∞SuiÊµãËØïÁΩëÔºö\n\n1. ÊâìÂºÄÊÇ®ÁöÑÈí±ÂåÖÊâ©Â±ï\n2. ÁÇπÂáªÁΩëÁªú‰∏ãÊãâËèúÂçïÔºàÈÄöÂ∏∏ÊòæÁ§∫"‰∏ªÁΩë"Ôºâ\n3. ‰ªéÂàóË°®‰∏≠ÈÄâÊã©"ÊµãËØïÁΩë"\n4. Âà∑Êñ∞Ê≠§È°µÈù¢Âπ∂ÈáçÊñ∞ËøûÊé•ÊÇ®ÁöÑÈí±ÂåÖ\n\nÂ¶ÇÊûúÊÇ®Ê≤°ÊúâÁúãÂà∞ÊµãËØïÁΩëÈÄâÈ°πÔºåËØ∑Á°Æ‰øùÊÇ®ÊúâÊúÄÊñ∞ÁâàÊú¨ÁöÑÈí±ÂåÖ„ÄÇ`,
    needTestnetSui: `üíß ÈúÄË¶ÅÊµãËØïÁΩëSUIÔºü`,
    needTestnetSuiText: `ÊµãËØïÁΩëSUI‰ª£Â∏ÅÊòØÂÖçË¥πÁöÑÔºågasË¥πÁî®ÈúÄË¶ÅÔºö\n\n1. ‰ªéÊÇ®ÁöÑÈí±ÂåÖÂ§çÂà∂ÊÇ®ÁöÑÈí±ÂåÖÂú∞ÂùÄ\n2. ËÆøÈóÆÔºöfaucet.testnet.sui.io\n3. Á≤òË¥¥ÊÇ®ÁöÑÂú∞ÂùÄÂπ∂ËØ∑Ê±ÇSUI\n4. Á≠âÂæÖ30ÁßíËÆ©‰ª£Â∏ÅÂà∞Ëææ\n\nÊÇ®Âè™ÈúÄË¶ÅÂÅö‰∏ÄÊ¨° - Â∞ëÈáèÂ∞±Ë∂≥Â§üËøõË°åËÆ∏Â§ö‰∫§Êòì„ÄÇ`,
    troubleshooting: `üîß ÊïÖÈöúÊéíÈô§`,
    troubleshootingText: `Â∏∏ËßÅÈóÆÈ¢òÂíåËß£ÂÜ≥ÊñπÊ°àÔºö\n\n‚Ä¢ Èí±ÂåÖÊó†Ê≥ïËøûÊé•ÔºöÁ°Æ‰øùÊÇ®ÁöÑÈí±ÂåÖÂ∑≤ÂÆâË£ÖÂπ∂Ëß£ÈîÅ\n‚Ä¢ È¢ÜÂèñ‰∏çÂ∑•‰ΩúÔºöÊ£ÄÊü•ÊÇ®Âú®ÊµãËØïÁΩë‰∏äÂπ∂Êúâgas\n‚Ä¢ ËøõÂ∫¶‰∏çÊòæÁ§∫ÔºöÂà∑Êñ∞È°µÈù¢Âπ∂ÈáçÊñ∞ËøûÊé•Èí±ÂåÖ\n‚Ä¢ ‰ª£Â∏Å‰∏¢Â§±ÔºöÈ™åËØÅÁΩëÁªúÂπ∂Ê£ÄÊü•Ê∞¥ÈæôÂ§¥\n\n‰ªçÊúâÈóÆÈ¢òÔºüËøôÊòØ‰∏Ä‰∏™Áî®‰∫éÂ≠¶‰π†ÁöÑÊµãËØïÁΩëÂ∫îÁî® - Ê≤°ÊúâÁúüÈí±ÂèÇ‰∏éÔºÅ`
  },
  'zh-TR': {
    aboutHoro: `‚ùì ÈóúÊñº$HORO`,
    whatIsHoro: `üß≠ ‰ªÄÈ∫º`,
    whatIsHoroText: `$HOROÊòØÂª∫Á´ãÂú®SuiÊ∏¨Ë©¶Á∂≤‰∏äÁöÑWeb3ÊòüÂ∫ßÈ´îÈ©ó„ÄÇÁî®Êà∂ÈÄöÈÅéÊü•ÁúãÊòüÂ∫ßÁç≤ÂæóÂÖçË≤ªÁöÑ$HORO‰ª£Âπ£‚Äî‚ÄîÁÑ°ÈúÄË≥ºË≤∑„ÄÅÁÑ°gasË≤ªÁî®„ÄÅÁÑ°ÈúÄÂä†ÂØÜË≤®Âπ£Áü•Ë≠ò„ÄÇ\n\nÈÄôÊòØ‰∏ÄÂÄãÊúâË∂£ÁöÑÊïôËÇ≤‰ª£Âπ£ÔºåÊ≤íÊúâÈáëËûçÁî®ÈÄîÊàñÊäïÊ©üÂÉπÂÄº„ÄÇÂè™ÈúÄÈñ±ËÆÄ‰Ω†ÁöÑÊòüÂ∫ßÔºåÁ∞ΩÁΩ≤‰Ω†ÁöÑÈå¢ÂåÖÔºå‰∫´ÂèóÁ•ûÂ•áÁöÑWeb3‰πãÊóÖ„ÄÇ`,
    whereIsHoro: `üåç Âú®Âì™Ë£°`,
    whereIsHoroText: `$HOROÂ≠òÂú®Êñºhorocoin.comÔºåÂÆåÂÖ®Âú®SuiÊ∏¨Ë©¶Á∂≤‰∏äÈÅãË°å„ÄÇ‰ª£Âπ£ÈÄöÈÅéÊàëÂÄëÁöÑdAppÂàÜÁôºÔºåÂÉÖÂú®ÊàëÂÄëÁöÑWeb3Â≠∏ÁøíÁîüÊÖãÁ≥ªÁµ±‰∏≠‰ΩøÁî®„ÄÇ`,
    whenIsHoro: `üìÖ ‰ªÄÈ∫ºÊôÇÂÄô`,
    whenIsHoroText: `$HOROÊåÅÁ∫åÈÅãË°åÔºö\n‚Ä¢ ÊØèÊó•Á∞ΩÂà∞ÔºöÈñ±ËÆÄ‰Ω†ÁöÑÊòüÂ∫ß‰∏¶ÈÄ£Êé•‰Ω†ÁöÑÈå¢ÂåÖ„ÄÇ\n‚Ä¢ Âç≥ÊôÇÁçéÂãµÔºöÁ∞ΩÂà∞ÊôÇÁ´ãÂç≥È†òÂèñ‰Ω†ÁöÑ$HORO‰ª£Âπ£„ÄÇ\n‚Ä¢ ÈÄ£Á∫åÁçéÂãµÔºöÊõ¥Èï∑ÁöÑÊØèÊó•ÈÄ£Á∫åÂ§©Êï∏Áç≤ÂæóÊõ¥Â§ßÁöÑÁçéÂãµ„ÄÇ`,
    whatsNext: `üîÆ Êé•‰∏ã‰æÜ`,
    whatsNextText: `ÊàëÂÄëÊ≠£Âú®‰∏çÊñ∑Êì¥Â±ï$HOROÔºå‰ª•ÂåÖÊã¨‰æÜËá™‰∏ñÁïåÂêÑÂú∞ÁöÑÊõ¥Â§öÂç†ÊòüÂÇ≥Áµ±„ÄÇÊàëÂÄëÁöÑË∑ØÁ∑öÂúñÂåÖÊã¨Â¢ûÂä†Âê†ÈôÄÂç†ÊòüË°ì„ÄÅÁë™ÈõÖÂç†ÊòüË°ì„ÄÅÂá±ÁàæÁâπÂç†ÊòüË°ìÂíåË®±Â§öÂÖ∂‰ªñÊñáÂåñÊòüÂ∫ßÁ≥ªÁµ±Ôºå‰ª•Á¢∫‰øùÊâÄÊúâÂÇ≥Áµ±ÈÉΩÂæóÂà∞ÈÅ©Áï∂ÁöÑ‰ª£Ë°®ÂíåÂ∞äÈáç„ÄÇ`,
    whyHoro: `ü§î ÁÇ∫‰ªÄÈ∫º`,
    whyHoroText: `$HOROÁöÑÂ≠òÂú®ÊòØÁÇ∫‰∫Ü‰ª•ÊúâË∂£„ÄÅ‰ΩéÂ£ìÂäõÁöÑÊñπÂºèÂêëÊòüÂ∫ßÊÑõÂ•ΩËÄÖÂíåWeb2Áî®Êà∂‰ªãÁ¥πWeb3Âü∫Á§éÁü•Ë≠ò„ÄÇÊ≤íÊúâ‰∫§ÊòìÔºåÊ≤íÊúâÊ≥¢ÂãïÊÄßÔºåÂè™ÊòØÂΩ¢ÊàêÁøíÊÖ£ÁöÑÂÆáÂÆôÈÅäÊà≤„ÄÇ`,
    
    // Tokenomics
    tokenomics: `üí∞ $HORO‰ª£Âπ£Á∂ìÊøüÂ≠∏`,
    totalSupplyTitle: `üì¶ Á∏Ω‰æõÊáâÈáè`,
    totalSupply: `10ÂÖÜ $HORO`,
    fixedSupply: `Âõ∫ÂÆöÁ∏Ω‰æõÊáâÈáè„ÄÇ‰∏ÄÊ¨°ÈëÑÈÄ†ÔºåÁÑ°ÈÄöËÑπÔºåÁÑ°ÈáçÊñ∞ÈëÑÈÄ†„ÄÇ`,
    allocationBreakdown: `üßÆ ÂàÜÈÖçÊòéÁ¥∞`,
    dailyClaims: `ÊØèÊó•È†òÂèñ`,
    ecosystemRewards: `ÁîüÊÖãÁ≥ªÁµ±ÁçéÂãµ`,
    socialEngagement: `Á§æ‰∫§ÂèÉËàá`,
    developerInfraSupport: `ÈñãÁôºËÄÖ/Âü∫Á§éË®≠ÊñΩÊîØÊåÅ`,
    futureSurprises: `Êú™‰æÜÈ©öÂñú`,
    contractAddress: `ÂêàÁ¥ÑÂú∞ÂùÄ`,
    dailyClaimsAmount: `9ÂÖÜ‰ª£Âπ£`,
    ecosystemRewardsAmount: `5000ÂÑÑ‰ª£Âπ£`,
    socialEngagementAmount: `3000ÂÑÑ‰ª£Âπ£`,
    developerInfraSupportAmount: `1000ÂÑÑ‰ª£Âπ£`,
    futureSurprisesAmount: `1000ÂÑÑ‰ª£Âπ£`,
    totalSupplyAmount: `10ÂÖÜ‰ª£Âπ£`,
    
    // Help
    help: `Âπ´Âä©`,
    helpTitle: `üí° Âπ´Âä©ËàáÊîØÊè¥`,
    switchToTestnet: `üîÑ Â∞áÈå¢ÂåÖÂàáÊèõÂà∞Ê∏¨Ë©¶Á∂≤`,
    switchToTestnetText: `Ë¶Å‰ΩøÁî®Ê≠§ÊáâÁî®ÔºåÊÇ®ÁöÑÈå¢ÂåÖÂøÖÈ†àÈÄ£Êé•Âà∞SuiÊ∏¨Ë©¶Á∂≤Ôºö\n\n1. ÊâìÈñãÊÇ®ÁöÑÈå¢ÂåÖÊì¥Â±ï\n2. ÈªûÊìäÁ∂≤Ë∑Ø‰∏ãÊãâÈÅ∏ÂñÆÔºàÈÄöÂ∏∏È°ØÁ§∫„Äå‰∏ªÁ∂≤„ÄçÔºâ\n3. ÂæûÂàóË°®‰∏≠ÈÅ∏Êìá„ÄåÊ∏¨Ë©¶Á∂≤„Äç\n4. Âà∑Êñ∞Ê≠§È†ÅÈù¢‰∏¶ÈáçÊñ∞ÈÄ£Êé•ÊÇ®ÁöÑÈå¢ÂåÖ\n\nÂ¶ÇÊûúÊÇ®Ê≤íÊúâÁúãÂà∞Ê∏¨Ë©¶Á∂≤ÈÅ∏È†ÖÔºåË´ãÁ¢∫‰øùÊÇ®ÊúâÊúÄÊñ∞ÁâàÊú¨ÁöÑÈå¢ÂåÖ„ÄÇ`,
    needTestnetSui: `üíß ÈúÄË¶ÅÊ∏¨Ë©¶Á∂≤SUIÔºü`,
    needTestnetSuiText: `Ê∏¨Ë©¶Á∂≤SUI‰ª£Âπ£ÊòØÂÖçË≤ªÁöÑÔºågasË≤ªÁî®ÈúÄË¶ÅÔºö\n\n1. ÂæûÊÇ®ÁöÑÈå¢ÂåÖË§áË£ΩÊÇ®ÁöÑÈå¢ÂåÖÂú∞ÂùÄ\n2. Ë®™ÂïèÔºöfaucet.testnet.sui.io\n3. Ë≤º‰∏äÊÇ®ÁöÑÂú∞ÂùÄ‰∏¶Ë´ãÊ±ÇSUI\n4. Á≠âÂæÖ30ÁßíËÆì‰ª£Âπ£Âà∞ÈÅî\n\nÊÇ®Âè™ÈúÄË¶ÅÂÅö‰∏ÄÊ¨° - Â∞ëÈáèÂ∞±Ë∂≥Â§†ÈÄ≤Ë°åË®±Â§ö‰∫§Êòì„ÄÇ`,
    troubleshooting: `üîß ÊïÖÈöúÊéíÈô§`,
    troubleshootingText: `Â∏∏Ë¶ãÂïèÈ°åÂíåËß£Ê±∫ÊñπÊ°àÔºö\n\n‚Ä¢ Èå¢ÂåÖÁÑ°Ê≥ïÈÄ£Êé•ÔºöÁ¢∫‰øùÊÇ®ÁöÑÈå¢ÂåÖÂ∑≤ÂÆâË£ù‰∏¶Ëß£Èéñ\n‚Ä¢ È†òÂèñ‰∏çÂ∑•‰ΩúÔºöÊ™¢Êü•ÊÇ®Âú®Ê∏¨Ë©¶Á∂≤‰∏ä‰∏¶Êúâgas\n‚Ä¢ ÈÄ≤Â∫¶‰∏çÈ°ØÁ§∫ÔºöÂà∑Êñ∞È†ÅÈù¢‰∏¶ÈáçÊñ∞ÈÄ£Êé•Èå¢ÂåÖ\n‚Ä¢ ‰ª£Âπ£ÈÅ∫Â§±ÔºöÈ©óË≠âÁ∂≤Ë∑Ø‰∏¶Ê™¢Êü•Ê∞¥ÈæçÈ†≠\n\n‰ªçÊúâÂïèÈ°åÔºüÈÄôÊòØ‰∏ÄÂÄãÁî®ÊñºÂ≠∏ÁøíÁöÑÊ∏¨Ë©¶Á∂≤ÊáâÁî® - Ê≤íÊúâÁúüÈå¢ÂèÉËàáÔºÅ`
  },
  ru: {
    aboutHoro: `‚ùì –û $HORO`,
    whatIsHoro: `üß≠ –ß—Ç–æ`,
    whatIsHoroText: `$HORO ‚Äî —ç—Ç–æ Web3-–æ–ø—ã—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –Ω–∞ —Ç–µ—Å—Ç–Ω–µ—Ç–µ Sui. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã $HORO –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ ‚Äî –Ω–∏–∫–∞–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫, –Ω–∏–∫–∞–∫–∏—Ö –∫–æ–º–∏—Å—Å–∏–π –∑–∞ –≥–∞–∑, –Ω–∏–∫–∞–∫–∏—Ö –∑–Ω–∞–Ω–∏–π –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.\n\n–≠—Ç–æ –≤–µ—Å–µ–ª—ã–π –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–µ–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Å–ø–µ–∫—É–ª—è—Ç–∏–≤–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏. –ü—Ä–æ—Å—Ç–æ —á–∏—Ç–∞–π—Ç–µ —Å–≤–æ–∏ –∑–≤–µ–∑–¥—ã, –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –∫–æ—à–µ–ª—å–∫–æ–º –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –º–∞–≥–∏—á–µ—Å–∫–∏–º Web3-–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ–º.`,
    whereIsHoro: `üåç –ì–¥–µ`,
    whereIsHoroText: `$HORO –∂–∏–≤–µ—Ç –Ω–∞ horocoin.com –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Ç–µ—Å—Ç–Ω–µ—Ç–µ Sui. –¢–æ–∫–µ–Ω—ã —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–∞—à–µ dApp –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—à–µ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ –æ–±—É—á–µ–Ω–∏—è Web3.`,
    whenIsHoro: `üìÖ –ö–æ–≥–¥–∞`,
    whenIsHoroText: `$HORO —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ —Å:\n‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏: –ß–∏—Ç–∞–π—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø –∏ –ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫.\n‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã: –ü–æ–ª—É—á–∞–π—Ç–µ —Ç–æ–∫–µ–Ω—ã $HORO —Å—Ä–∞–∑—É –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ.\n‚Ä¢ –ë–æ–Ω—É—Å—ã –∑–∞ —Å–µ—Ä–∏–∏: –ë–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–µ—Ä–∏–∏ –¥–∞—é—Ç –±–æ–ª—å—à–∏–µ –Ω–∞–≥—Ä–∞–¥—ã.`,
    whatsNext: `üîÆ –ß—Ç–æ –î–∞–ª—å—à–µ`,
    whatsNextText: `–ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞—Å—à–∏—Ä—è–µ–º $HORO, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –±–æ–ª—å—à–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∞–¥–∏—Ü–∏–π —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞. –ù–∞—à–∞ –¥–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞ –≤–∫–ª—é—á–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ–¥–∏—á–µ—Å–∫–æ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏, –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ –º–∞–π—è, –∫–µ–ª—å—Ç—Å–∫–æ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ –∏ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –∑–æ–¥–∏–∞–∫–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–∞–¥–ª–µ–∂–∞—â–µ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏ —É–≤–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∞–¥–∏—Ü–∏–π.`,
    whyHoro: `ü§î –ü–æ—á–µ–º—É`,
    whyHoroText: `$HORO —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å –ª—é–±–∏—Ç–µ–ª–µ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Web2 —Å –æ—Å–Ω–æ–≤–∞–º–∏ Web3 –≤–µ—Å–µ–ª—ã–º, –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º. –ù–∏–∫–∞–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏, –Ω–∏–∫–∞–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏, —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∏—Ä—É—é—â–∞—è –ø—Ä–∏–≤—ã—á–∫–∏ –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞.`,
    
    // Tokenomics
    tokenomics: `üí∞ –¢–æ–∫–µ–Ω–æ–º–∏–∫–∞ $HORO`,
    totalSupplyTitle: `üì¶ –û–±—â–µ–µ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ`,
    totalSupply: `10—Ç—Ä–ª–Ω $HORO`,
    fixedSupply: `–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –û—Ç—á–µ–∫–∞–Ω–µ–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑, –±–µ–∑ –∏–Ω—Ñ–ª—è—Ü–∏–∏, –±–µ–∑ –ø–µ—Ä–µ—á–µ–∫–∞–Ω–∫–∏.`,
    allocationBreakdown: `üßÆ –†–∞–∑–±–∏–≤–∫–∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è`,
    dailyClaims: `–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ü—Ä–µ—Ç–µ–Ω–∑–∏–∏`,
    contractAddress: `–ê–¥—Ä–µ—Å –ö–æ–Ω—Ç—Ä–∞–∫—Ç–∞`,
    dailyClaimsAmount: `10—Ç—Ä–ª–Ω —Ç–æ–∫–µ–Ω–æ–≤`,
    totalSupplyAmount: `10—Ç—Ä–ª–Ω —Ç–æ–∫–µ–Ω–æ–≤`,
    
    // Help
    help: `–ü–æ–º–æ—â—å`,
    helpTitle: `üí° –ü–æ–º–æ—â—å –∏ –ü–æ–¥–¥–µ—Ä–∂–∫–∞`,
    switchToTestnet: `üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ö–æ—à–µ–ª–µ–∫ –Ω–∞ –¢–µ—Å—Ç–Ω–µ—Ç`,
    switchToTestnetText: `–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Sui Testnet:\n\n1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞\n2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é —Å–µ—Ç–∏ (–æ–±—ã—á–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 'Mainnet')\n3. –í—ã–±–µ—Ä–∏—Ç–µ 'Testnet' –∏–∑ —Å–ø–∏—Å–∫–∞\n4. –û–±–Ω–æ–≤–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫\n\n–ï—Å–ª–∏ –≤—ã –Ω–µ –≤–∏–¥–∏—Ç–µ –æ–ø—Ü–∏—é Testnet, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è –∫–æ—à–µ–ª—å–∫–∞.`,
    needTestnetSui: `üíß –ù—É–∂–µ–Ω Testnet SUI?`,
    needTestnetSuiText: `–¢–æ–∫–µ–Ω—ã Testnet SUI –±–µ—Å–ø–ª–∞—Ç–Ω—ã –∏ –Ω—É–∂–Ω—ã –¥–ª—è –∫–æ–º–∏—Å—Å–∏–π –∑–∞ –≥–∞–∑:\n\n1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞\n2. –ü–æ—Å–µ—Ç–∏—Ç–µ: faucet.testnet.sui.io\n3. –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ SUI\n4. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥, –ø–æ–∫–∞ —Ç–æ–∫–µ–Ω—ã –ø—Ä–∏–±—É–¥—É—Ç\n\n–í–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ - –Ω–µ–±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ –º–Ω–æ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.`,
    troubleshooting: `üîß –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ù–µ–ø–æ–ª–∞–¥–æ–∫`,
    troubleshootingText: `–ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è:\n\n‚Ä¢ –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n‚Ä¢ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –≤ Testnet –∏ —É –≤–∞—Å –µ—Å—Ç—å –≥–∞–∑\n‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è: –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫\n‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç—å –∏ –∫—Ä–∞–Ω–∏–∫\n\n–í—Å–µ –µ—â–µ –ø—Ä–æ–±–ª–µ–º—ã? –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ testnet –¥–ª—è –æ–±—É—á–µ–Ω–∏—è - –Ω–∏–∫–∞–∫–∏—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥ –Ω–µ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–æ!`
  },
  fr: {
    aboutHoro: `‚ùì √Ä propos de $HORO`,
    whatIsHoro: `üß≠ Quoi`,
    whatIsHoroText: `$HORO est une dApp d'horoscope Web3 construite sur le testnet Sui. Les utilisateurs re√ßoivent des tokens $HORO gratuits pour consulter leur horoscope ‚Äî aucun achat, aucun frais de gas, aucune connaissance crypto requise.\n\nC'est un token amusant et √©ducatif sans utilit√© financi√®re ou valeur sp√©culative. Lisez simplement vos √©toiles, signez avec votre portefeuille et profitez d'un voyage Web3 magique.`,
    whereIsHoro: `üåç O√π`,
    whereIsHoroText: `$HORO vit sur horocoin.com et fonctionne enti√®rement sur le testnet Sui. Les tokens sont distribu√©s via notre dApp et utilis√©s uniquement dans notre √©cosyst√®me d'apprentissage Web3.`,
    whenIsHoro: `üìÖ Quand`,
    whenIsHoroText: `$HORO fonctionne en continu avec :\n‚Ä¢ Enregistrements quotidiens : Lisez votre horoscope et connectez votre portefeuille.\n‚Ä¢ R√©compenses instantan√©es : R√©clamez vos tokens $HORO imm√©diatement lors de l'enregistrement.\n‚Ä¢ Bonus de s√©rie : Des s√©ries quotidiennes plus longues donnent de plus grandes r√©compenses.`,
    whatsNext: `üîÆ Et Ensuite`,
    whatsNextText: `Nous √©largissons continuellement $HORO pour inclure plus de traditions astrologiques du monde entier. Notre feuille de route comprend l'ajout de l'astrologie v√©dique, l'astrologie maya, l'astrologie celtique et de nombreux autres syst√®mes zodiacaux culturels pour s'assurer que toutes les traditions sont correctement repr√©sent√©es et honor√©es.`,
    whyHoro: `ü§î Pourquoi`,
    whyHoroText: `$HORO existe pour introduire les amateurs d'astrologie et les utilisateurs Web2 aux bases du Web3 de mani√®re amusante et sans pression. Pas de trading, pas de volatilit√©, juste un jeu cosmique formant des habitudes.`,
    
    // Tokenomics
    tokenomics: `üí∞ Tokenomique $HORO`,
    totalSupplyTitle: `üì¶ Offre Totale`,
    totalSupply: `10T $HORO`,
    fixedSupply: `Offre totale fixe. Frapp√© une fois, pas d'inflation, pas de re-frappe.`,
    allocationBreakdown: `üßÆ R√©partition de l'Allocation`,
    dailyClaims: `R√©clamations Quotidiennes`,
    contractAddress: `Adresse du Contrat`,
    dailyClaimsAmount: `10T tokens`, 
    totalSupplyAmount: `10T tokens`,
    
    // Help
    help: `Aide`,
    helpTitle: `üí° Aide et Support`,
    switchToTestnet: `üîÑ Changer Portefeuille vers Testnet`,
    switchToTestnetText: `Pour utiliser cette app, votre portefeuille doit √™tre connect√© au Sui Testnet :\n\n1. Ouvrez votre extension de portefeuille\n2. Cliquez sur le menu d√©roulant de r√©seau (affiche g√©n√©ralement 'Mainnet')\n3. S√©lectionnez 'Testnet' dans la liste\n4. Actualisez cette page et reconnectez votre portefeuille\n\nSi vous ne voyez pas l'option Testnet, assurez-vous d'avoir la derni√®re version de votre portefeuille.`,
    needTestnetSui: `üíß Besoin de SUI Testnet ?`,
    needTestnetSuiText: `Les tokens SUI testnet sont gratuits et n√©cessaires pour les frais de gas :\n\n1. Copiez l'adresse de votre portefeuille depuis votre portefeuille\n2. Visitez : faucet.testnet.sui.io\n3. Collez votre adresse et demandez SUI\n4. Attendez 30 secondes que les tokens arrivent\n\nVous n'avez besoin de le faire qu'une fois - une petite quantit√© suffit pour de nombreuses transactions.`,
    troubleshooting: `üîß D√©pannage`,
    troubleshootingText: `Probl√®mes courants et solutions :\n\n‚Ä¢ Le portefeuille ne se connecte pas : Assurez-vous que votre portefeuille est install√© et d√©verrouill√©\n‚Ä¢ Les r√©clamations ne fonctionnent pas : V√©rifiez que vous √™tes sur Testnet et avez du gas\n‚Ä¢ Le progr√®s ne s'affiche pas : Actualisez la page et reconnectez le portefeuille\n‚Ä¢ Tokens manquants : V√©rifiez le r√©seau et le robinet\n\nToujours des probl√®mes ? C'est une app testnet pour apprendre - aucun vrai argent impliqu√© !`
  },
  pt: {
    aboutHoro: `‚ùì Sobre $HORO`,
    whatIsHoro: `üß≠ O que`,
    whatIsHoroText: `$HORO √© uma dApp de hor√≥scopo Web3 constru√≠da na testnet Sui. Usu√°rios recebem tokens $HORO gratuitos por verificar seu hor√≥scopo ‚Äî sem compras, sem taxas de gas, sem conhecimento cripto necess√°rio.\n\nEste √© um token divertido e educativo sem utilidade financeira ou valor especulativo. Apenas leia suas estrelas, assine com sua carteira e desfrute de uma jornada Web3 m√°gica e estelar!`,
    whereIsHoro: `üåç Onde`,
    whereIsHoroText: `$HORO vive em horocoin.com e roda inteiramente na testnet Sui. Tokens s√£o distribu√≠dos atrav√©s de nossa dApp e usados apenas em nosso ecossistema de aprendizado Web3.`,
    whenIsHoro: `üìÖ Quando`,
    whenIsHoroText: `$HORO roda continuamente com:\n‚Ä¢ Check-ins di√°rios: Leia seu hor√≥scopo e conecte sua carteira.\n‚Ä¢ Recompensas instant√¢neas: Reivindique seus tokens $HORO imediatamente ao fazer check-in.\n‚Ä¢ B√¥nus de sequ√™ncia: Sequ√™ncias di√°rias mais longas ganham maiores recompensas.`,
    whatsNext: `üîÆ O que Vem a Seguir`,
    whatsNextText: `Estamos continuamente expandindo $HORO para incluir mais tradi√ß√µes astrol√≥gicas de todo o mundo. Nosso roadmap inclui adicionar astrologia v√©dica, astrologia maia, astrologia celta e muitos outros sistemas zodiacais culturais para garantir que todas as tradi√ß√µes sejam adequadamente representadas e honradas.`,
    whyHoro: `ü§î Por que`,
    whyHoroText: `$HORO existe para introduzir amantes da astrologia e usu√°rios Web2 aos b√°sicos do Web3 de uma forma divertida e sem press√£o. Sem negocia√ß√£o, sem volatilidade, apenas intera√ß√£o c√≥smica que forma h√°bitos e √© alimentada por blockchain.`,
    
    // Tokenomics
    tokenomics: `üí∞ Token√¥mica $HORO`,
    totalSupplyTitle: `üì¶ Fornecimento Total`,
    totalSupply: `10T $HORO`,
    fixedSupply: `Fornecimento total fixo. Cunhado uma vez, sem infla√ß√£o, sem re-cunhagem.`,
    allocationBreakdown: `üßÆ Detalhamento da Aloca√ß√£o`,
    dailyClaims: `Reivindica√ß√µes Di√°rias`,
    contractAddress: `Endere√ßo do Contrato`,
    dailyClaimsAmount: `10T tokens`,
    totalSupplyAmount: `10T tokens`,
    
    // Help
    help: `Ajuda`,
    helpTitle: `üí° Ajuda e Suporte`,
    switchToTestnet: `üîÑ Mudar Carteira para Testnet`,
    switchToTestnetText: `Para usar este app, sua carteira deve estar conectada √† Sui Testnet:\n\n1. Abra sua extens√£o de carteira\n2. Clique no dropdown de rede (geralmente mostra 'Mainnet')\n3. Selecione 'Testnet' da lista\n4. Atualize esta p√°gina e reconecte sua carteira\n\nSe voc√™ n√£o v√™ a op√ß√£o Testnet, certifique-se de ter a vers√£o mais recente de sua carteira.`,
    needTestnetSui: `üíß Precisa de SUI Testnet?`,
    needTestnetSuiText: `Tokens SUI testnet s√£o gratuitos e necess√°rios para taxas de gas:\n\n1. Copie o endere√ßo de sua carteira da sua carteira\n2. Visite: faucet.testnet.sui.io\n3. Cole seu endere√ßo e solicite SUI\n4. Aguarde 30 segundos para os tokens chegarem\n\nVoc√™ s√≥ precisa fazer isso uma vez - uma pequena quantidade dura para muitas transa√ß√µes.`,
    troubleshooting: `üîß Solu√ß√£o de Problemas`,
    troubleshootingText: `Problemas comuns e solu√ß√µes:\n\n‚Ä¢ Carteira n√£o conecta: Certifique-se de que sua carteira esteja instalada e desbloqueada\n‚Ä¢ Reivindica√ß√µes n√£o funcionam: Verifique se voc√™ est√° na Testnet e tem gas\n‚Ä¢ Progresso n√£o aparece: Atualize a p√°gina e reconecte a carteira\n‚Ä¢ Tokens em falta: Verifique a rede e a torneira\n\nAinda com problemas? Este √© um app testnet para aprender - sem dinheiro real envolvido!`
  }
};

// Error Boundary Component
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }

  componentDidCatch(error, errorInfo) {
    console.error('App Error:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 text-white flex items-center justify-center px-4">
          <div className="max-w-md w-full text-center">
            <div className="bg-red-900/30 rounded-xl p-6 border border-red-500/30">
              <h2 className="text-2xl font-bold text-red-400 mb-4">Oops! Something went wrong</h2>
              <p className="text-gray-300 mb-6">The app encountered an unexpected error. Please refresh the page to try again.</p>
              <button onClick={() => window.location.reload()} className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-6 rounded-lg transition-colors">
                Refresh Page
              </button>
            </div>
          </div>
        </div>
      );
    }
    return this.props.children;
  }
}

// Loading Spinner Component
const LoadingSpinner = ({ size = "h-5 w-5" }) => (
  <div className={`animate-spin rounded-full ${size} border-2 border-white border-t-transparent`}></div>
);

// Gas Management Component
const GasManager = ({ currentAccount, suiClient, t }) => {
  const [gasBalance, setGasBalance] = useState(null);
  const [isRequestingGas, setIsRequestingGas] = useState(false);
  const [gasStatus, setGasStatus] = useState('checking');

  const MIN_GAS_BALANCE = 50_000_000;

  const checkGasBalance = async () => {
    if (!currentAccount || !currentAccount.address) return;
    
    try {
      const balance = await suiClient.getBalance({
        owner: currentAccount.address,
        coinType: '0x2::sui::SUI'
      });
      
      const totalBalance = parseInt(balance.totalBalance);
      setGasBalance(totalBalance);
      setGasStatus(totalBalance >= MIN_GAS_BALANCE ? 'sufficient' : 'low');
    } catch (error) {
      console.error('Failed to check gas balance:', error);
      setGasStatus('low');
    }
  };

  const requestTestnetGas = async () => {
    if (!currentAccount.address || isRequestingGas) return;
    
    setIsRequestingGas(true);
    
    try {
      const faucetUrl = `https://faucet.testnet.sui.io/`;
      window.open(faucetUrl, '_blank');
      
      alert(`üö∞ Testnet Faucet opened in new tab!\n\nüìã Your address: ${currentAccount.address}\n\n1. Please paste your address in the faucet\n2. Please click "Request SUI"\n3. Please come back here and try again\n\n(This takes ~30 seconds)`);
      
      setTimeout(() => {
        checkGasBalance();
        setIsRequestingGas(false);
      }, 5000);
      
    } catch (error) {
      console.error('Failed to open faucet:', error);
      alert(t('gasError') || 'Failed to open faucet');
      setIsRequestingGas(false);
    }
  };

  const formatSuiAmount = (amount) => {
    if (!amount) return '0';
    return (amount / 1_000_000_000).toFixed(4);
  };

  React.useEffect(() => {
    if (currentAccount && currentAccount.address) {
      checkGasBalance();
    } else {
      setGasBalance(null);
      setGasStatus('checking');
    }
  }, [currentAccount, currentAccount?.address]);

  if (!currentAccount) return null;

  return (
    <div className="space-y-2">
      <div className="flex items-center justify-between text-sm">
        <span className="text-gray-400">{t('gasBalance') || 'Gas Balance'}:</span>
        <span className={gasStatus === 'sufficient' ? 'text-green-400' : 'text-yellow-400'}>
          {gasBalance !== null ? `${formatSuiAmount(gasBalance)} SUI` : 'Loading...'}
        </span>
      </div>

      {gasStatus === 'low' && (
        <div className="bg-yellow-900/30 rounded-lg p-3 border border-yellow-400/30">
          <div className="text-center space-y-3">
            <p className="text-yellow-300 font-semibold text-sm">{t('gasLow') || '‚õΩ Low Gas Balance'}</p>
            <p className="text-yellow-200 text-xs">{t('gasNeeded') || 'Please add testnet SUI to your wallet for transactions'}</p>
            <button
              onClick={requestTestnetGas}
              disabled={isRequestingGas}
              className="bg-yellow-600 hover:bg-yellow-700 disabled:opacity-50 text-white px-4 py-2 rounded-lg text-sm font-semibold transition-colors flex items-center space-x-2 mx-auto"
            >
              {isRequestingGas ? (
                <>
                  <LoadingSpinner size="h-4 w-4" />
                  <span>{t('gettingGas') || 'Opening faucet...'}</span>
                </>
              ) : (
                <span>{t('getFreeGas') || 'Open Testnet Faucet'}</span>
              )}
            </button>
          </div>
        </div>
      )}

      {gasStatus === 'sufficient' && (
        <div className="text-center">
          <p className="text-green-400 text-xs">{t('sufficientGas') || '‚úÖ Sufficient gas for transactions'}</p>
        </div>
      )}
    </div>
  );
};

// SUI Blockchain Time Management with improved consistency
const useSuiTime = () => {
  const [suiTimeData, setSuiTimeData] = useState({
    timestamp: null,
    dayOfWeek: null,
    currentDay: null,
    weekNumber: null,
    year: null,
    isLoaded: false,
    error: null
  });

  // Get SUI blockchain time directly from Clock object with improved error handling
  const getSuiTime = async (suiClient) => {
    try {
      console.log('üïí Fetching SUI blockchain time...');
      
      if (!suiClient) {
        throw new Error('SUI client not available');
      }
      
      // Get the SUI Clock object to read current timestamp
      const clockObject = await suiClient.getObject({
        id: '0x6', // SUI Clock singleton object
        options: { showContent: true }
      });
      
      console.log('üïí Clock object:', clockObject);
      
      if (clockObject.data?.content?.fields?.timestamp_ms) {
        const timestampMs = parseInt(clockObject.data.content.fields.timestamp_ms);
        const timestampSeconds = Math.floor(timestampMs / 1000);
        
        // Calculate day of week using SUI timestamp (same as contract logic)
        // SUI epoch started on a Thursday (day 4), so we adjust accordingly
        const daysSinceEpoch = Math.floor(timestampSeconds / 86400);
        const dayOfWeek = (daysSinceEpoch + 4) % 7; // +4 because epoch started on Thursday
        
        // Calculate week number and year - use the same logic as the contract
        const daysSinceSunday = (daysSinceEpoch + 4) % 7; // Calculate days since Sunday
        const sundayOfCurrentWeek = daysSinceEpoch - daysSinceSunday;
        const weekNumber = Math.floor(sundayOfCurrentWeek / 7);
        
        // Calculate year (simplified but consistent)
        const yearsSince2024 = Math.floor((daysSinceEpoch - 19723) / 365); // 19723 is days from epoch to 2024-01-01
        const year = 2024 + yearsSince2024;
        
        console.log('üïí SUI time calculated:', {
          timestampMs,
          timestampSeconds,
          daysSinceEpoch,
          dayOfWeek,
          weekNumber,
          year,
          humanReadable: new Date(timestampMs).toISOString()
        });
        
        const timeData = {
          timestamp: timestampMs,
          dayOfWeek,
          currentDay: daysSinceEpoch,
          weekNumber,
          year,
          isLoaded: true,
          error: null
        };
        
        setSuiTimeData(timeData);
        return timeData;
      } else {
        throw new Error('Unable to read timestamp from SUI Clock object');
      }
    } catch (error) {
      console.error('‚ùå Failed to get SUI time:', error);
      
      // Improved fallback using UTC time to match blockchain calculations
      const utcNow = new Date();
      const utcTimestamp = utcNow.getTime();
      const utcSeconds = Math.floor(utcTimestamp / 1000);
      const utcDaysSinceEpoch = Math.floor(utcSeconds / 86400);
      const utcDayOfWeek = (utcDaysSinceEpoch + 4) % 7; // Same calculation as SUI
      
      // Use same week calculation logic as SUI time
      const daysSinceSunday = (utcDaysSinceEpoch + 4) % 7;
      const sundayOfCurrentWeek = utcDaysSinceEpoch - daysSinceSunday;
      const weekNumber = Math.floor(sundayOfCurrentWeek / 7);
      
      const yearsSince2024 = Math.floor((utcDaysSinceEpoch - 19723) / 365);
      const year = 2024 + yearsSince2024;
      
      console.log('üïí Using UTC time fallback (consistent with SUI logic):', {
        utcDayOfWeek,
        utcDaysSinceEpoch,
        weekNumber,
        year
      });
      
      const fallbackData = {
        timestamp: utcTimestamp,
        dayOfWeek: utcDayOfWeek,
        currentDay: utcDaysSinceEpoch,
        weekNumber,
        year,
        isLoaded: true,
        error: error.message
      };
      
      setSuiTimeData(fallbackData);
      return fallbackData;
    }
  };

  return { suiTimeData, getSuiTime };
};

// Current zodiac season logic
const getCurrentZodiacSeason = () => {
  const now = new Date();
  const month = now.getMonth() + 1;
  const day = now.getDate();
  
  if ((month === 3 && day >= 21) || (month === 4 && day <= 19)) return 'aries';
  if ((month === 4 && day >= 20) || (month === 5 && day <= 20)) return 'taurus';
  if ((month === 5 && day >= 21) || (month === 6 && day <= 20)) return 'gemini';
  if ((month === 6 && day >= 21) || (month === 7 && day <= 22)) return 'cancer';
  if ((month === 7 && day >= 23) || (month === 8 && day <= 22)) return 'leo';
  if ((month === 8 && day >= 23) || (month === 9 && day <= 22)) return 'virgo';
  if ((month === 9 && day >= 23) || (month === 10 && day <= 22)) return 'libra';
  if ((month === 10 && day >= 23) || (month === 11 && day <= 21)) return 'scorpio';
  if ((month === 11 && day >= 22) || (month === 12 && day <= 21)) return 'sagittarius';
  if ((month === 12 && day >= 22) || (month === 1 && day <= 19)) return 'capricorn';
  if ((month === 1 && day >= 20) || (month === 2 && day <= 18)) return 'aquarius';
  return 'pisces';
};

const ZODIAC_SIGNS = [
  { name: 'aries', symbol: '‚ôà', dates: 'Mar 21 - Apr 19' },
  { name: 'taurus', symbol: '‚ôâ', dates: 'Apr 20 - May 20' },
  { name: 'gemini', symbol: '‚ôä', dates: 'May 21 - Jun 20' },
  { name: 'cancer', symbol: '‚ôã', dates: 'Jun 21 - Jul 22' },
  { name: 'leo', symbol: '‚ôå', dates: 'Jul 23 - Aug 22' },
  { name: 'virgo', symbol: '‚ôç', dates: 'Aug 23 - Sep 22' },
  { name: 'libra', symbol: '‚ôé', dates: 'Sep 23 - Oct 22' },
  { name: 'scorpio', symbol: '‚ôè', dates: 'Oct 23 - Nov 21' },
  { name: 'sagittarius', symbol: '‚ôê', dates: 'Nov 22 - Dec 21' },
  { name: 'capricorn', symbol: '‚ôë', dates: 'Dec 22 - Jan 19' },
  { name: 'aquarius', symbol: '‚ôí', dates: 'Jan 20 - Feb 18' },
  { name: 'pisces', symbol: '‚ôì', dates: 'Feb 19 - Mar 20' }
];

const CHINESE_ZODIAC_SIGNS = [
  { name: 'rat', symbol: 'üêÄ' },
  { name: 'ox', symbol: 'üêÇ'},
  { name: 'tiger', symbol: 'üêÖ'},
  { name: 'rabbit', symbol: 'üêá'},
  { name: 'dragon', symbol: 'üêâ'},
  { name: 'snake', symbol: 'üêç'},
  { name: 'horse', symbol: 'üêé'},
  { name: 'goat', symbol: 'üêê'},
  { name: 'monkey', symbol: 'üêí'},
  { name: 'rooster', symbol: 'üêì'},
  { name: 'dog', symbol: 'üêï'},
  { name: 'pig', symbol: 'üêñ'}
];

// Detect mobile
const isMobile = typeof navigator !== 'undefined' && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

// Custom Connect Button Component with deep linking for Suiet on mobile
const CustomConnectButton = ({ t }) => {
  const currentAccount = useCurrentAccount();
  const { connectionStatus } = useCurrentWallet();
  
  if (currentAccount) {
    return (
      <div className="flex flex-col items-center space-y-3">
        <div className="bg-green-600 text-white font-semibold py-2 px-4 rounded-lg">
          {t('connected')}: {currentAccount.address.slice(0, 6)}...{currentAccount.address.slice(-4)}
        </div>
      </div>
    );
  }

  if (isMobile) {
    return (
      <button 
        onClick={() => window.location.href = `suiet://wallet/connect?dappUrl=${encodeURIComponent(window.location.origin)}`}
        className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors"
      >
        {t('connectWalletButton')}
      </button>
    );
  }

  return (
    <div className="flex flex-col items-center space-y-3">
      <div className="wallet-connect-button">
        <ConnectButton 
          connectText={t('connectWalletButton')}
          connectedText={t('connected')}
        />
      </div>
    </div>
  );
};

// Language Selector Component
const LanguageSelector = ({ currentLanguage, onLanguageChange, textColor = "text-yellow-200" }) => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className={`${textColor} hover:text-white transition-colors text-sm font-medium cursor-pointer flex items-center space-x-1`}
      >
        <Globe className="h-4 w-4" />
        <span>{LANGUAGES[currentLanguage]?.flag}</span>
        <span>{LANGUAGES[currentLanguage]?.name}</span>
      </button>
      
      {isOpen && (
        <div 
          className="absolute bottom-full mb-2 left-0 bg-black/80 backdrop-blur-sm rounded-lg border border-gray-600 shadow-lg min-w-max z-50"
          onMouseLeave={() => setIsOpen(false)}
        >
          {Object.entries(LANGUAGES).map(([code, language]) => (
            <button
              key={code}
              onClick={() => {
                onLanguageChange(code);
                setIsOpen(false);
              }}
              className="w-full px-4 py-2 text-left hover:bg-white/10 transition-colors text-white text-sm flex items-center space-x-2 first:rounded-t-lg last:rounded-b-lg"
            >
              <span>{language.flag}</span>
              <span>{language.name}</span>
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

function HoroApp() {
  const currentAccount = useCurrentAccount();
  const { mutate: signAndExecuteTransaction } = useSignAndExecuteTransaction();
  const suiClient = useSuiClient();
  const { currentWallet, connectionStatus } = useCurrentWallet();
  const { suiTimeData, getSuiTime } = useSuiTime();
  const [selectedSign, setSelectedSign] = useState('');
  const [selectedSystem, setSelectedSystem] = useState('');
  const [weeklyProgressByDay, setWeeklyProgressByDay] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const [currentSeason, setCurrentSeason] = useState('');
  const [stars, setStars] = useState([]);
  const [showAbout, setShowAbout] = useState(false);
  const [showTokenomics, setShowTokenomics] = useState(false);
  const [showHelp, setShowHelp] = useState(false);
  const [autoSigningProgress, setAutoSigningProgress] = useState(false);
  const [language, setLanguage] = useState('en');
  
  // Blockchain claim verification state
  const [blockchainClaimStatus, setBlockchainClaimStatus] = useState('checking');
  const [isVerifyingClaim, setIsVerifyingClaim] = useState(false);
  const [todaysClaimAmount, setTodaysClaimAmount] = useState(0);

  // Translation helper function
  const t = (key, replacements = {}) => {
    let translation = TRANSLATIONS[language]?.[key] || key;
    Object.keys(replacements).forEach(placeholder => {
      translation = translation.replace(`{${placeholder}}`, replacements[placeholder]);
    });
    return translation;
  };

  // Modal translation helper
  const mt = (key) => {
    return MODAL_TRANSLATIONS[language]?.[key] || key;
  };

  // Get flag for Western zodiac button based on current language
  const getWesternFlag = () => {
    const westernLanguages = ['en', 'es', 'ru', 'fr'];
    if (westernLanguages.includes(language)) {
      return LANGUAGES[language].flag;
    }
    return 'üá∫üá∏'; // Default to US flag for non-western languages
  };

  // Date formatting helper function
  const formatCurrentDate = () => {
    const now = new Date();
    
    // Language code mapping for Intl.DateTimeFormat
    const localeMap = {
      'en': 'en-US',
      'es': 'es-ES',
      'zh': 'zh-CN',
      'zh-TR': 'zh-TW',
      'ru': 'ru-RU',
      'fr': 'fr-FR'
    };
    
    const locale = localeMap[language] || 'en-US';
    
    try {
      return new Intl.DateTimeFormat(locale, {
        timeZone: 'UTC',
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      }).format(now);
    } catch (error) {
      // Fallback to English format if locale is not supported
      return new Intl.DateTimeFormat('en-US', {
        timeZone: 'UTC',
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      }).format(now);
    }
  };

  // Helper function to get translated day names
  const getDayName = (dayIndex) => {
    const dayKeys = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
    return t(dayKeys[dayIndex]);
  };

  const getZodiacSymbol = () => {
    const signs = selectedSystem === 'western' ? ZODIAC_SIGNS : CHINESE_ZODIAC_SIGNS;
    const sign = signs.find(s => s.name === selectedSign);
    return sign ? sign.symbol : '';
  };

  // Get horoscope for current language and system
  const getCurrentHoroscope = () => {
    if (selectedSystem === 'western') {
      return $HOROSCOPES[language]?.[selectedSign] || $HOROSCOPES?.en?.[selectedSign] || 'Your daily horoscope will appear here.';
    } else {
      return CHINESE_$HOROSCOPES[language]?.[selectedSign] || CHINESE_$HOROSCOPES?.en?.[selectedSign] || 'Your daily horoscope will appear here.';
    }
  };

  // Use SUI blockchain time consistently
  const getCurrentDayOfWeek = () => {
    if (suiTimeData.isLoaded && suiTimeData.dayOfWeek !== null) {
      return suiTimeData.dayOfWeek;
    }
    
    // Fallback to UTC time calculation (same as SUI time calculation)
    const utcDate = new Date();
    const utcTimestamp = utcDate.getTime();
    const utcSeconds = Math.floor(utcTimestamp / 1000);
    const utcDaysSinceEpoch = Math.floor(utcSeconds / 86400);
    const utcDayOfWeek = (utcDaysSinceEpoch + 4) % 7; // Same calculation as SUI
    
    return utcDayOfWeek;
  };

  // Get date for a specific day of week using SUI time
  const getDateForDayOfWeek = (dayOfWeek) => {
    if (!suiTimeData.isLoaded || suiTimeData.timestamp === null || suiTimeData.dayOfWeek === null) {
      // Fallback to UTC time to maintain consistency with SUI time
      const today = new Date();
      const utcToday = new Date(today.getTime() + (today.getTimezoneOffset() * 60000));
      const currentDayOfWeek = (Math.floor(utcToday.getTime() / (1000 * 86400)) + 4) % 7;
      const diff = dayOfWeek - currentDayOfWeek;
      const targetDate = new Date(utcToday);
      targetDate.setDate(utcToday.getDate() + diff);
      return targetDate.toISOString().split('T')[0];
    }
    
    // Use SUI blockchain time-based calculation
    const suiDate = new Date(suiTimeData.timestamp);
    const currentSuiDayOfWeek = suiTimeData.dayOfWeek;
    const diff = dayOfWeek - currentSuiDayOfWeek;
    const targetDate = new Date(suiDate);
    targetDate.setDate(suiDate.getDate() + diff);
    return targetDate.toISOString().split('T')[0];
  };

  // Check blockchain claim status using SUI time with optional silent mode
  const checkBlockchainClaimStatus = async (silent = false) => {
    if (!currentAccount || !currentAccount.address) {
      setBlockchainClaimStatus('checking');
      return;
    }

    if (!silent) {
      setIsVerifyingClaim(true);
    }
    
    try {
      // Always get fresh SUI time to ensure we have current data
      const currentSuiTime = await getSuiTime(suiClient);
      
      console.log('üîç Checking blockchain claim status for:', currentAccount.address);
      console.log('üîç Using SUI day of week:', currentSuiTime.dayOfWeek);
      
      const result = await suiClient.devInspectTransactionBlock({
        transactionBlock: (() => {
          const txb = new Transaction();
          txb.moveCall({
            target: `${PACKAGE_ID}::horo::has_claimed_today`,
            arguments: [
              txb.object(CLAIMS_ID),
              txb.object('0x6'), // Sui Clock object
              txb.pure.address(currentAccount.address)
            ]
          });
          return txb;
        })(),
        sender: currentAccount.address,
      });

      console.log('üîç Has claimed today result:', result);
      
      if (result.results && result.results[0] && result.results[0].returnValues && result.results[0].returnValues[0]) {
        const returnValue = result.results[0].returnValues[0];
        let hasClaimed = false;
        
        if (Array.isArray(returnValue) && returnValue.length >= 2) {
          const dataArray = returnValue[0];
          if (Array.isArray(dataArray) && dataArray.length > 0) {
            hasClaimed = dataArray[0] === 1;
          }
        }
        
        console.log('üîç Has claimed today (parsed):', hasClaimed);
        console.log('üîç Based on SUI time, today is day:', currentSuiTime.dayOfWeek);
        setBlockchainClaimStatus(hasClaimed ? 'claimed' : 'not_claimed');
      } else {
        setBlockchainClaimStatus('not_claimed');
      }
    } catch (error) {
      console.error('‚ùå Failed to check has_claimed_today:', error);
      setBlockchainClaimStatus('not_claimed');
    }
    
    if (!silent) {
      setIsVerifyingClaim(false);
    }
  };

  // Improved ULEB128 decoding function
  const decodeULEB128 = (data, offset) => {
    let value = 0;
    let shift = 0;
    let currentOffset = offset;
    
    while (currentOffset < data.length) {
      const byte = data[currentOffset];
      value |= (byte & 0x7F) << shift;
      currentOffset++;
      
      if ((byte & 0x80) === 0) {
        break;
      }
      
      shift += 7;
      if (shift >= 64) {
        throw new Error('ULEB128 value too large');
      }
    }
    
    return { value, nextOffset: currentOffset };
  };

  // Improved little-endian u64 parsing with endianness verification
  const parseU64LittleEndian = (data, offset) => {
    if (offset + 8 > data.length) {
      throw new Error(`Not enough bytes for u64 at offset ${offset}, need 8 bytes but only ${data.length - offset} available`);
    }
    
    // Parse as little-endian u64
    let value = 0;
    for (let i = 0; i < 8; i++) {
      const byte = data[offset + i];
      value += byte * Math.pow(256, i);
    }
    
    // Verify the result is within safe JavaScript integer range
    if (value > Number.MAX_SAFE_INTEGER) {
      console.warn(`Warning: u64 value ${value} exceeds MAX_SAFE_INTEGER, precision may be lost`);
    }
    
    return value;
  };

  // Load weekly progress using SUI time with improved error handling
  const loadWeeklyProgress = async () => {
    if (!currentAccount?.address) {
      setWeeklyProgressByDay({});
      return;
    }
    
    setIsLoading(true);
    try {
      // Always get fresh SUI time to ensure we have current data
      const currentSuiTime = await getSuiTime(suiClient);
      
      console.log('üìä Loading weekly progress from blockchain for:', currentAccount.address);
      console.log('üìä SUI day of week:', currentSuiTime.dayOfWeek);
      console.log('üìä SUI current day:', currentSuiTime.currentDay);
      
      const result = await suiClient.devInspectTransactionBlock({
        transactionBlock: (() => {
          const txb = new Transaction();
          txb.moveCall({
            target: `${PACKAGE_ID}::horo::get_weekly_progress`,
            arguments: [
              txb.object(PROGRESS_REGISTRY_ID),
              txb.pure.address(currentAccount.address),
              txb.object('0x6'), // Clock
            ]
          });
          return txb;
        })(),
        sender: currentAccount.address,
      });
      
      console.log('üìä Blockchain progress query result:', result);
      
      const weeklyData = parseWeeklyProgressResult(result);
      setWeeklyProgressByDay(weeklyData);
      
      console.log('üìä Parsed weekly progress by day:', weeklyData);
      console.log('üìä Number of days with progress:', Object.keys(weeklyData).length);
      
      // Log each day's progress using translated day names
      Object.keys(weeklyData).forEach(dayOfWeek => {
        console.log(`üìä ${getDayName(dayOfWeek)} (${dayOfWeek}): ${weeklyData[dayOfWeek].dailyReward} $HORO`);
      });
      
    } catch (error) {
      console.error('‚ùå Failed to load weekly progress from blockchain:', error);
      setWeeklyProgressByDay({});
    }
    setIsLoading(false);
  };

  // Parse weekly progress result from blockchain with improved error handling
  const parseWeeklyProgressResult = (result) => {
    try {
      console.log('üîç Full blockchain result:', JSON.stringify(result, null, 2));
      
      if (result.results && result.results[0] && result.results[0].returnValues && result.results[0].returnValues[0]) {
        const returnValue = result.results[0].returnValues[0];
        console.log('üîç Raw progress return value:', returnValue);
        
        if (Array.isArray(returnValue) && returnValue.length >= 1) {
          const serializedData = returnValue[0]; // This is the serialized byte array
          console.log('üîç Serialized data:', serializedData);
          console.log('üîç Serialized data length:', serializedData.length);
          
          if (Array.isArray(serializedData) && serializedData.length > 0) {
            return parseFlatClaimData(serializedData);
          }
        }
      }
      
      console.log('üîç No valid return values found');
      return {};
    } catch (error) {
      console.error('‚ùå Error parsing weekly progress:', error);
      return {};
    }
  };

  // Parse flat claim data from Move vector serialization with proper ULEB128 and complete field parsing
  const parseFlatClaimData = (data) => {
    const progressByDay = {};
    let offset = 0;
    
    console.log('üîç Parsing flat claim data, total bytes:', data.length);
    
    if (offset >= data.length) {
      console.log('üîç No data to parse');
      return {};
    }
    
    try {
      // Parse vector length using ULEB128
      const { value: vectorLength, nextOffset } = decodeULEB128(data, offset);
      offset = nextOffset;
      console.log('üîç Vector contains', vectorLength, 'claims');
      
      // Parse each DailyClaimInfo struct in the vector
      for (let i = 0; i < vectorLength; i++) {
        try {
          const result = parseSingleClaim(data, offset);
          if (result.claim) {
            progressByDay[result.claim.dayOfWeek] = result.claim;
            console.log(`‚úÖ Parsed claim ${i} for day ${result.claim.dayOfWeek}:`, result.claim);
            offset = result.nextOffset;
          } else {
            console.log(`üîç Failed to parse claim ${i} at offset:`, offset);
            // Try to skip this claim and continue with the next one
            console.log('üîç Attempting to skip malformed claim and continue...');
            break;
          }
        } catch (error) {
          console.error(`‚ùå Error parsing claim ${i} at offset`, offset, ':', error);
          // Try to recover by skipping some bytes, but this is risky
          console.log('üîç Attempting recovery by skipping claim...');
          break;
        }
      }
    } catch (error) {
      console.error('‚ùå Error parsing vector length:', error);
      return {};
    }
    
    console.log('üìä Final progressByDay object:', progressByDay);
    return progressByDay;
  };

  // Parse a single DailyClaimInfo struct - FIXED to include all 6 fields
  const parseSingleClaim = (data, startOffset) => {
    let offset = startOffset;
    
    console.log(`üîç Parsing single claim starting at offset ${offset}`);
    
    if (offset >= data.length) {
      throw new Error('Offset beyond data length');
    }
    
    try {
      // Parse day_of_week (u8 - 1 byte)
      const dayOfWeek = data[offset];
      offset += 1;
      console.log(`üîç Day of week: ${dayOfWeek}`);
      
      if (dayOfWeek > 6) {
        throw new Error(`Invalid day of week: ${dayOfWeek}`);
      }
      
      // Parse amount_claimed (u64 - 8 bytes, little endian)
      const amount = parseU64LittleEndian(data, offset);
      offset += 8;
      console.log(`üîç Amount: ${amount} (${Math.floor(amount / 1_000_000)} $HORO)`);
      
      // Parse timestamp (u64 - 8 bytes, little endian)
      const timestamp = parseU64LittleEndian(data, offset);
      offset += 8;
      console.log(`üîç Timestamp: ${timestamp}`);
      
      // Parse zodiac_sign vector (ULEB128 length prefix + bytes)
      const { value: zodiacLength, nextOffset: afterZodiacLength } = decodeULEB128(data, offset);
      offset = afterZodiacLength;
      console.log(`üîç Zodiac sign length: ${zodiacLength}`);
      
      // Parse zodiac_sign bytes
      if (offset + zodiacLength > data.length) {
        throw new Error(`Not enough bytes for zodiac sign, need ${zodiacLength} bytes but only ${data.length - offset} available`);
      }
      
      const zodiacBytes = data.slice(offset, offset + zodiacLength);
      offset += zodiacLength;
      
      let zodiacSign = '';
      try {
        if (zodiacLength > 0) {
          zodiacSign = new TextDecoder().decode(new Uint8Array(zodiacBytes));
        }
      } catch (e) {
        console.warn('Failed to decode zodiac sign:', e);
        zodiacSign = 'unknown';
      }
      console.log(`üîç Zodiac sign: "${zodiacSign}"`);
      
      // Parse claim_day (u64 - 8 bytes, little endian)
      const claimDay = parseU64LittleEndian(data, offset);
      offset += 8;
      console.log(`üîç Claim day: ${claimDay}`);
      
      // Parse streak_at_claim (u64 - 8 bytes, little endian) - THIS WAS MISSING!
      const streakAtClaim = parseU64LittleEndian(data, offset);
      offset += 8;
      console.log(`üîç Streak at claim: ${streakAtClaim}`);
      
      const claim = {
        dayOfWeek,
        amount: amount,
        dailyReward: Math.floor(amount / 1_000_000), // Convert from 6 decimals to display value
        timestamp,
        zodiacSign,
        claimDay,
        streakAtClaim, // Now included!
        date: getDateForDayOfWeek(dayOfWeek)
      };
      
      console.log(`‚úÖ Successfully parsed complete claim:`, claim);
      return { claim, nextOffset: offset };
      
    } catch (error) {
      console.error(`‚ùå Error parsing claim at offset ${offset}:`, error);
      return { claim: null, nextOffset: offset };
    }
  };

  const calculateDailyReward = (dayCount) => {
    const baseReward = 10;
    const streakBonus = Math.floor(dayCount / 3) * 5;
    return baseReward + streakBonus;
  };

  // Get daily streak from blockchain data
  const getDailyStreak = () => {
    return Object.keys(weeklyProgressByDay).length;
  };

  // Check if today is completed using both blockchain and localStorage data
  const isTodayCompleted = () => {
    const currentDayOfWeek = getCurrentDayOfWeek();
    const hasProgressToday = weeklyProgressByDay[currentDayOfWeek];
    return blockchainClaimStatus === 'claimed' || !!hasProgressToday;
  };

  // Update today's claim amount from blockchain data
  const updateTodaysClaimAmount = () => {
    const currentDayOfWeek = getCurrentDayOfWeek();
    const todaysProgress = weeklyProgressByDay[currentDayOfWeek];
    
    if (blockchainClaimStatus === 'claimed' || todaysProgress) {
      if (todaysProgress && todaysProgress.dailyReward) {
        setTodaysClaimAmount(todaysProgress.dailyReward);
      } else {
        // Wait for blockchain data to load before showing estimated amount
        if (Object.keys(weeklyProgressByDay).length === 0) {
          setTodaysClaimAmount(0); // Don't show estimate until data loads
          return;
        }
        const currentStreak = getDailyStreak();
        const estimatedAmount = calculateDailyReward(currentStreak + 1); // +1 for today's claim
        setTodaysClaimAmount(estimatedAmount);
      }
    } else {
      setTodaysClaimAmount(0);
    }
  };
  
  useEffect(() => {
    // Load saved language
    const savedLanguage = localStorage.getItem('horoLanguage');
    if (savedLanguage && LANGUAGES[savedLanguage]) {
      setLanguage(savedLanguage);
    }
  }, []);

  useEffect(() => {
    localStorage.setItem('horoLanguage', language);
  }, [language]);

  useEffect(() => {
    const season = getCurrentZodiacSeason();
    setCurrentSeason(season);
    
    const newStars = Array.from({ length: 30 }, (_, i) => ({
      id: i,
      x: Math.random() * 100,
      size: Math.random() * 3 + 2,
      delay: Math.random() * 10,
      duration: Math.random() * 3 + 4
    }));
    setStars(newStars);

    // Check for saved zodiac sign
    const savedSign = localStorage.getItem('horoZodiacSign');
    const savedSystem = localStorage.getItem('horoZodiacSystem');
    if (savedSign && savedSystem) {
      setSelectedSign(savedSign);
      setSelectedSystem(savedSystem);
    }
  }, [currentAccount, language]);

  // Initialize SUI time and then check claim status, plus periodic status checking
  useEffect(() => {
    let statusCheckInterval;
    
    if (currentAccount && currentAccount.address && selectedSign) {
      // Get SUI time first, then check status and load progress
      getSuiTime(suiClient).then((currentSuiTime) => {
        console.log('üïí SUI time initialized:', currentSuiTime);
        checkBlockchainClaimStatus();
        loadWeeklyProgress();
      }).catch((error) => {
        console.error('‚ùå Failed to initialize SUI time:', error);
        // Still try to check status with fallback time
        checkBlockchainClaimStatus();
        loadWeeklyProgress();
      });

      // Set up periodic status checking to catch successful transactions (silent mode)
      statusCheckInterval = setInterval(async () => {
        try {
          await checkBlockchainClaimStatus(true); // Silent mode - no UI flicker
          await loadWeeklyProgress();
        } catch (error) {
          console.error('Error in periodic status check:', error);
        }
      }, 5000); // Check every 5 seconds

    } else {
      setBlockchainClaimStatus('checking');
      setTodaysClaimAmount(0);
      setWeeklyProgressByDay({});
    }

    return () => {
      if (statusCheckInterval) {
        clearInterval(statusCheckInterval);
      }
    };
  }, [currentAccount, currentAccount?.address, selectedSign]);
  
  useEffect(() => {
    if (currentAccount) {
      updateTodaysClaimAmount();
    }
  }, [blockchainClaimStatus, weeklyProgressByDay, suiTimeData]);

  // Claim function with improved error handling
  const claimTodaysHoro = async (sign) => {
    const hasAlreadyClaimed = isTodayCompleted();
    
    if (hasAlreadyClaimed || !signAndExecuteTransaction) {
      console.log('‚ùå Cannot claim: already claimed or no signing capability');
      if (hasAlreadyClaimed) {
        alert(`üí´ You've already claimed your daily $HORO! ‚ú®\n\nCome back tomorrow for another cosmic blessing~`);
      }
      return;
    }
    
    setAutoSigningProgress(true);
    
    try {
      // Ensure we have fresh SUI time data
      const currentSuiTime = await getSuiTime(suiClient);
      console.log('üïí Using SUI time for claim:', currentSuiTime);
      
      const currentStreak = getDailyStreak();
      const dailyReward = calculateDailyReward(currentStreak + 1);
      const amount = dailyReward * 1_000_000; // Convert to 6 decimals
      
      console.log('üöÄ Preparing to claim', dailyReward, '$HORO tokens...');
      
      // Validate contract objects
      const treasuryObject = await suiClient.getObject({
        id: TREASURY_ID,
        options: { showContent: true, showType: true }
      });
      
      const claimsObject = await suiClient.getObject({
        id: CLAIMS_ID,
        options: { showContent: true, showType: true }
      });

      const progressObject = await suiClient.getObject({
        id: PROGRESS_REGISTRY_ID,
        options: { showContent: true, showType: true }
      });
      
      if (!claimsObject.data?.type?.includes('DailyClaims')) {
        throw new Error(`Invalid claims object - expected DailyClaims, got: ${claimsObject.data?.type}`);
      }
      
      if (!treasuryObject.data?.type?.includes('Treasury')) {
        throw new Error(`Invalid treasury object - expected Treasury, got: ${treasuryObject.data?.type}`);
      }

      if (!progressObject.data?.type?.includes('UserProgressRegistry')) {
        throw new Error(`Invalid progress registry object - expected UserProgressRegistry, got: ${progressObject.data?.type}`);
      }
      
      console.log('‚úÖ Contract objects validated successfully');
      
      // Convert zodiac sign to bytes for the contract
      const zodiacSignBytes = Array.from(new TextEncoder().encode(sign));
      console.log('üî§ Zodiac sign bytes:', zodiacSignBytes);
      
      // Build transaction
      const txb = new Transaction();
      
      try {
        txb.moveCall({
          target: `${PACKAGE_ID}::horo::claim_daily_reward`,
          arguments: [
            txb.object(TREASURY_ID),
            txb.object(CLAIMS_ID),
            txb.object(PROGRESS_REGISTRY_ID),
            txb.object('0x6'), // Sui Clock object
            txb.pure.u64(amount),
            txb.pure.vector('u8', zodiacSignBytes)
          ]
        });
        
        console.log('üìã Transaction built successfully');
      } catch (buildError) {
        console.error('‚ùå Transaction build error:', buildError);
        throw new Error(`Failed to build transaction: ${buildError.message}`);
      }
      
      // Sign and execute transaction - simplified approach for wallet compatibility
      console.log('‚úçÔ∏è Requesting wallet signature and execution...');
      
      try {
        const txResult = await signAndExecuteTransaction(
          {
            transaction: txb,
          },
          {
            onSuccess: async (result) => {
              console.log('üéâ Transaction succeeded:', result);
              
              // Update blockchain claim status
              setBlockchainClaimStatus('claimed');
              
              // Reload weekly progress from blockchain
              await loadWeeklyProgress();
              
              alert(`üéâ Daily Check-in Complete!\n\n+${dailyReward} $HORO earned today!\nStreak: ${currentStreak + 1} days\n\nTransaction: ${result.digest || 'completed'}`);
              
              console.log('‚úÖ Daily check-in completed successfully');
            },
            onError: (error) => {
              console.error('‚ùå Transaction failed:', error);
              throw error;
            }
          }
        );
        
        // For wallets that return the result directly
        if (txResult) {
          console.log('‚úÖ Direct transaction result:', txResult);
          
          const digest = txResult.digest || txResult.transactionDigest || 'completed';
          
          // Update blockchain claim status
          setBlockchainClaimStatus('claimed');
          
          // Reload weekly progress from blockchain  
          await loadWeeklyProgress();
          
          alert(`üéâ Daily Check-in Complete!\n\n+${dailyReward} $HORO earned today!\nStreak: ${currentStreak + 1} days\n\nTransaction: ${digest}`);
        }
        
      } catch (signError) {
        console.error('‚ùå Transaction error:', signError);
        
        // Check if the error is just a timing issue but transaction might still go through
        if (signError.message && (signError.message.includes('undefined') || signError.message.includes('digest'))) {
          console.log('üîÑ Possible timing issue detected, will check status after wallet interaction...');
          
          // Give the wallet time to process and then check status
          setTimeout(async () => {
            try {
              await checkBlockchainClaimStatus(true); // Silent mode
              await loadWeeklyProgress();
              
              // If claim status changed to claimed, show success
              if (blockchainClaimStatus === 'claimed') {
                alert(`üéâ Transaction completed successfully!\n\n+${dailyReward} $HORO earned today!`);
              }
            } catch (recheckError) {
              console.error('Error rechecking status:', recheckError);
            }
          }, 3000);
          
          // Don't throw the error - let the wallet handle the transaction
          return;
        }
        
        throw signError;
      }
    } catch (error) {
      console.error('Daily check-in failed:', error);
      const errorMessage = error.message || error.toString() || '';
      
      console.log('üîç Full error object:', error);
      
      // Don't show error dialog for timing/undefined issues - these often resolve themselves
      if (errorMessage.includes('undefined') || errorMessage.includes('digest') || errorMessage.includes('Cannot read properties')) {
        console.log('üîÑ Suppressing timing-related error dialog, transaction may still succeed');
        return; // Exit gracefully without showing error
      }
      
      if (errorMessage.includes('EAlreadyClaimedToday') || 
          errorMessage.includes('Abort(1)') || 
          errorMessage.includes('), 1)') ||
          errorMessage.includes('MoveAbort') && errorMessage.includes(', 1)') ||
          (errorMessage.includes('Dry run failed') && (errorMessage.includes('1)') || errorMessage.includes('), 1)')))) {
        setBlockchainClaimStatus('claimed');
        alert(`üí´ You've already claimed your daily $HORO! ‚ú®\n\nCome back tomorrow for another cosmic blessing~`);
      } else if (errorMessage.includes('EGlobalPeriodLimitExceeded') || errorMessage.includes('Abort(4)')) {
        alert('üåü The cosmic energy is at maximum capacity right now!\n\nPlease try again in a few hours when the stars realign~ ‚ú®');
      } else if (errorMessage.includes('Insufficient gas')) {
        alert('Need testnet SUI for gas. Please use the "Open Testnet Faucet" button to get free gas!');
      } else if (errorMessage.includes('User rejected') || errorMessage.includes('user rejected') || errorMessage.includes('cancelled')) {
        alert('Transaction was cancelled. No $HORO tokens were awarded.');
      } else {
        alert(`üîÆ The cosmic connection seems unstable right now.\n\nError: ${errorMessage.slice(0, 100)}...\n\nPlease try again in a moment!`);
      }
    }
    
    setAutoSigningProgress(false);
  };

  const selectZodiacSign = async (sign) => {
    const weekStart = getWeekStartDate();
    const savedWeekSign = localStorage.getItem(`horoWeekSign_${weekStart}`);
    
    if (savedWeekSign && savedWeekSign !== sign) {
      alert(`You've already selected ${savedWeekSign} for this week. Please continue with your chosen sign or wait until next Monday to change it.`);
      return;
    }
    
    setSelectedSign(sign);
    localStorage.setItem('horoZodiacSign', sign);
    localStorage.setItem('horoZodiacSystem', selectedSystem);
    localStorage.setItem(`horoWeekSign_${weekStart}`, sign);
    
    // Get SUI time and load progress after selecting sign
    if (currentAccount) {
      try {
        const currentSuiTime = await getSuiTime(suiClient);
        console.log('üïí SUI time loaded after sign selection:', currentSuiTime);
        await checkBlockchainClaimStatus();
        await loadWeeklyProgress();
      } catch (error) {
        console.error('‚ùå Failed to load SUI time after sign selection:', error);
        // Still try to check status with fallback
        await checkBlockchainClaimStatus();
        await loadWeeklyProgress();
      }
    }
  };

  const getWeekStartDate = () => {
    const now = new Date();
    const dayOfWeek = now.getDay();
    const startOfWeek = new Date(now);
    startOfWeek.setDate(now.getDate() - dayOfWeek + 1);
    return startOfWeek.toISOString().split('T')[0];
  };

  const handleLanguageChange = (newLanguage) => {
    setLanguage(newLanguage);
  };

  // Show zodiac system selection if no system selected
  if (!selectedSystem) {
    return (
      <>
        <div className="min-h-screen relative overflow-hidden" style={{
          background: 'linear-gradient(135deg, #fbbf24 0%, #f59e0b 25%, #d97706 50%, #b45309 75%, #92400e 100%)'
        }}>
          {stars.map(star => (
            <div
              key={star.id}
              className="absolute text-yellow-200"
              style={{
                left: `${star.x}%`,
                top: '-50px',
                fontSize: `${star.size * 2}px`,
                animation: `fallingStar ${star.duration}s linear infinite`,
                animationDelay: `${star.delay}s`,
                filter: 'drop-shadow(0 0 4px rgba(255, 255, 0, 0.8))',
                zIndex: 10
              }}
            >
              ‚≠ê
            </div>
          ))}

          <div className="relative z-10 min-h-screen flex flex-col items-center justify-center px-4 py-12">
            <div className="text-center mb-8">
              <h1 className="text-4xl sm:text-6xl font-bold text-white mb-4 tracking-wider" style={{
                textShadow: '3px 3px 0px rgba(0,0,0,0.3), 6px 6px 0px rgba(0,0,0,0.1)'
              }}>
                {t('dailyHoro')}
              </h1>
              <p className="text-xl sm:text-2xl text-yellow-200 font-semibold">
                {t('chooseZodiacSystem')}
              </p>
            </div>

            <div className="max-w-md w-full space-y-6">
              <div className="grid grid-cols-2 gap-6">
                <button
                  onClick={() => setSelectedSystem('western')}
                  className="bg-white/20 backdrop-blur-sm hover:bg-white/30 p-6 rounded-xl transition-all duration-200 transform hover:scale-105 text-center"
                >
                  <div className="text-4xl mb-2">{getWesternFlag()}</div>
                  <div className="text-white font-semibold text-lg">{t('western')}</div>
                </button>
                <button
                  onClick={() => setSelectedSystem('chinese')}
                  className="bg-white/20 backdrop-blur-sm hover:bg-white/30 p-6 rounded-xl transition-all duration-200 transform hover:scale-105 text-center"
                >
                  <div className="text-4xl mb-2">üá®üá≥</div>
                  <div className="text-white font-semibold text-lg">{t('chinese')}</div>
                </button>
              </div>
            </div>

            <div className="mt-12 text-center">
              <div className="flex space-x-4 mb-4 justify-center">
                <Sparkles className="h-6 w-6 text-yellow-300 animate-pulse" />
                <Sparkles className="h-8 w-8 text-yellow-200 animate-pulse" style={{animationDelay: '0.3s'}} />
                <Sparkles className="h-6 w-6 text-yellow-300 animate-pulse" style={{animationDelay: '0.6s'}} />
              </div>
              
              <div className="flex flex-wrap justify-center gap-4 sm:gap-6 text-yellow-200">
                <button 
                  onClick={() => setShowAbout(true)}
                  className="hover:text-white transition-colors text-sm font-medium cursor-pointer"
                >
                  {t('about')}
                </button>
                <button 
                  onClick={() => setShowTokenomics(true)}
                  className="hover:text-white transition-colors text-sm font-medium cursor-pointer"
                >
                  {t('tokenomics')}
                </button>
                <button 
                  onClick={() => setShowHelp(true)}
                  className="hover:text-white transition-colors text-sm font-medium cursor-pointer"
                >
                  {t('help')}
                </button>
                <LanguageSelector 
                  currentLanguage={language} 
                  onLanguageChange={handleLanguageChange}
                />
              </div>

              {/* SVAC Static Logo - Centered below footer */}
              <div className="flex justify-center items-center mt-12">
                <div className="text-gray-500">
                  {/* <StaticLogo size="small" /> */}
                </div>
              </div>
            </div>
          </div>
        </div>

      {/* About Modal */}
      {showAbout && (
        <div 
          className="fixed inset-0 bg-black/80 flex items-center justify-center p-4"
          style={{ zIndex: 99999 }}
          onClick={() => setShowAbout(false)}
        >
          <div 
            className="bg-gray-900 rounded-xl w-full sm:max-w-2xl max-h-[80vh] overflow-y-auto border border-gray-600"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="sticky top-0 bg-gray-900 p-6 border-b border-gray-600 flex items-center justify-between">
              <h2 className="text-2xl font-bold text-white">{mt('aboutHoro')}</h2>
              <button 
                onClick={() => setShowAbout(false)}
                className="text-gray-400 hover:text-white text-2xl"
              >
                √ó
              </button>
            </div>
            
            <div className="p-6 space-y-6 text-gray-100">
              <div>
                <h3 className="text-xl font-bold text-yellow-400 mb-3">{mt('whatIsHoro')}</h3>
                <p className="leading-relaxed whitespace-pre-line">{mt('whatIsHoroText')}</p>
              </div>

              <div>
                <h3 className="text-xl font-bold text-yellow-400 mb-3">{mt('whereIsHoro')}</h3>
                <p className="leading-relaxed">{mt('whereIsHoroText')}</p>
              </div>

              <div>
                <h3 className="text-xl font-bold text-yellow-400 mb-3">{mt('whenIsHoro')}</h3>
                <div className="leading-relaxed whitespace-pre-line">{mt('whenIsHoroText')}</div>
              </div>

              <div>
                <h3 className="text-xl font-bold text-yellow-400 mb-3">{mt('whyHoro')}</h3>
                <p className="leading-relaxed">{mt('whyHoroText')}</p>
              </div>

              <div>
                <h3 className="text-xl font-bold text-yellow-400 mb-3">{mt('whatsNext')}</h3>
                <p className="leading-relaxed">{mt('whatsNextText')}</p>
              </div>

              <div className="bg-blue-900/30 p-4 rounded-lg border border-blue-400/30">
                <h4 className="font-semibold text-blue-300 mb-2">{mt('contractAddress')}</h4>
                <div className="font-mono text-xs text-blue-200 break-all bg-black/30 p-2 rounded">
                  {PACKAGE_ID}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Tokenomics Modal */}
      {showTokenomics && (
        <div 
          className="fixed inset-0 bg-black/80 flex items-center justify-center p-4"
          style={{ zIndex: 99999 }}
          onClick={() => setShowTokenomics(false)}
        >
          <div 
            className="bg-gray-900 rounded-xl w-full sm:max-w-2xl max-h-[80vh] overflow-y-auto border border-gray-600"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="sticky top-0 bg-gray-900 p-6 border-b border-gray-600 flex items-center justify-between">
              <h2 className="text-2xl font-bold text-white">{mt('tokenomics')}</h2>
              <button 
                onClick={() => setShowTokenomics(false)}
                className="text-gray-400 hover:text-white text-2xl"
              >
                √ó
              </button>
            </div>
            
            <div className="p-6 space-y-6 text-gray-100">
              <div className="text-center">
                <h3 className="text-xl font-bold text-yellow-400 mb-2">{mt('totalSupplyTitle')}</h3>
                <h4 className="text-2xl font-bold text-white mb-2">{mt('totalSupply')}</h4>
                <p className="text-green-400 font-semibold">{mt('fixedSupply')}</p>
              </div>

              <div>
                <h3 className="text-xl font-bold text-yellow-400 mb-4">{mt('allocationBreakdown')}</h3>
                <div className="space-y-3">
                  <div className="bg-purple-900/30 p-4 rounded-lg border border-purple-400/30">
                    <div className="flex justify-between items-center">
                      <div>
                        <div className="font-semibold text-purple-300">{mt('dailyClaims')}</div>
                        <div className="text-xs text-gray-400">{language === 'zh' ? '10‰∏á‰∫ø' : language === 'zh-TR' ? '10ÂÖÜ' : language === 'ru' ? '10—Ç—Ä–ª–Ω' : '10T'} tokens</div>
                      </div>
                      <div className="text-2xl font-bold text-purple-300">100%</div>
                    </div>
                  </div>
        
                </div>
                
              </div>

              <div className="bg-blue-900/30 p-4 rounded-lg border border-blue-400/30">
                <h4 className="font-semibold text-blue-300 mb-2">{mt('contractAddress')}</h4>
                <div className="font-mono text-xs text-blue-200 break-all bg-black/30 p-2 rounded">
                  {PACKAGE_ID}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Help Modal */}
      {showHelp && (
        <div 
          className="fixed inset-0 bg-black/80 flex items-center justify-center p-4"
          style={{ zIndex: 99999 }}
          onClick={() => setShowHelp(false)}
        >
          <div 
            className="bg-gray-900 rounded-xl w-full sm:max-w-2xl max-h-[80vh] overflow-y-auto border border-gray-600"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="sticky top-0 bg-gray-900 p-6 border-b border-gray-600 flex items-center justify-between">
              <h2 className="text-2xl font-bold text-white">{mt('helpTitle')}</h2>
              <button 
                onClick={() => setShowHelp(false)}
                className="text-gray-400 hover:text-white text-2xl"
              >
                √ó
              </button>
            </div>
            
            <div className="p-6 space-y-6 text-gray-100">
              <div>
                <h3 className="text-xl font-bold text-blue-400 mb-3">{mt('switchToTestnet')}</h3>
                <p className="leading-relaxed whitespace-pre-line">{mt('switchToTestnetText')}</p>
              </div>

              <div>
                <h3 className="text-xl font-bold text-green-400 mb-3">{mt('needTestnetSui')}</h3>
                <p className="leading-relaxed whitespace-pre-line">{mt('needTestnetSuiText')}</p>
              </div>

              <div>
                <h3 className="text-xl font-bold text-yellow-400 mb-3">{mt('troubleshooting')}</h3>
                <p className="leading-relaxed whitespace-pre-line">{mt('troubleshootingText')}</p>
              </div>
            </div>
          </div>
        </div>
      )}

      </>
    );
  }

  // Show zodiac selection if no sign selected
  if (!selectedSign) {
    return (
      <>
        <div className="min-h-screen relative overflow-hidden" style={{
          background: 'linear-gradient(135deg, #fbbf24 0%, #f59e0b 25%, #d97706 50%, #b45309 75%, #92400e 100%)'
        }}>
          {stars.map(star => (
            <div
              key={star.id}
              className="absolute text-yellow-200"
              style={{
                left: `${star.x}%`,
                top: '-50px',
                fontSize: `${star.size * 2}px`,
                animation: `fallingStar ${star.duration}s linear infinite`,
                animationDelay: `${star.delay}s`,
                filter: 'drop-shadow(0 0 4px rgba(255, 255, 0, 0.8))',
                zIndex: 10
              }}
            >
              ‚≠ê
            </div>
          ))}

          <div className="relative z-10 min-h-screen flex flex-col items-center justify-center px-4 py-12">
            <div className="text-center mb-8">
              <h1 className="text-4xl sm:text-6xl font-bold text-white mb-4 tracking-wider" style={{
                textShadow: '3px 3px 0px rgba(0,0,0,0.3), 6px 6px 0px rgba(0,0,0,0.1)'
              }}>
                {t('dailyHoro')}
              </h1>
              <p className="text-xl sm:text-2xl text-yellow-200 font-semibold">
                {selectedSystem === 'western' ? t('chooseWesternZodiac') : t('chooseChineseZodiac')}
              </p>
            </div>

            <div className="max-w-md w-full space-y-6">
              <div className="grid grid-cols-2 sm:grid-cols-3 gap-4">
                {(selectedSystem === 'western' ? ZODIAC_SIGNS : CHINESE_ZODIAC_SIGNS).map(sign => (
                  <button
                    key={sign.name}
                    onClick={() => selectZodiacSign(sign.name)}
                    className="bg-white/20 backdrop-blur-sm hover:bg-white/30 p-4 rounded-xl transition-all duration-200 transform hover:scale-105 text-center"
                  >
                    <div className="text-2xl mb-1">{sign.symbol}</div>
                    <div className="text-white font-semibold capitalize text-sm">{t(sign.name)}</div>
                    {selectedSystem === 'western' && (
                      <div className="text-yellow-200 text-xs">{sign.dates}</div>
                    )}
                  </button>
                ))}
              </div>
            </div>

            <div className="mt-12 text-center">
              <div className="flex space-x-4 mb-4 justify-center">
                <Sparkles className="h-6 w-6 text-yellow-300 animate-pulse" />
                <Sparkles className="h-8 w-8 text-yellow-200 animate-pulse" style={{animationDelay: '0.3s'}} />
                <Sparkles className="h-6 w-6 text-yellow-300 animate-pulse" style={{animationDelay: '0.6s'}} />
              </div>
              
              <div className="flex flex-wrap justify-center gap-4 sm:gap-6 text-yellow-200">
                <button 
                  onClick={() => setShowAbout(true)}
                  className="hover:text-white transition-colors text-sm font-medium cursor-pointer"
                >
                  {t('about')}
                </button>
                <button 
                  onClick={() => setShowTokenomics(true)}
                  className="hover:text-white transition-colors text-sm font-medium cursor-pointer"
                >
                  {t('tokenomics')}
                </button>
                <button 
                  onClick={() => setShowHelp(true)}
                  className="hover:text-white transition-colors text-sm font-medium cursor-pointer"
                >
                  {t('help')}
                </button>
                <LanguageSelector 
                  currentLanguage={language} 
                  onLanguageChange={handleLanguageChange}
                />
              </div>

              {/* SVAC Static Logo - Centered below footer */}
              <div className="flex justify-center items-center mt-12">
                <div className="text-gray-500">
                  {/* <StaticLogo size="small" /> */}
                </div>
              </div>
            </div>

          </div>
        </div>

        {/* About Modal */}
        {showAbout && (
          <div 
            className="fixed inset-0 bg-black/80 flex items-center justify-center p-4"
            style={{ zIndex: 99999 }}
            onClick={() => setShowAbout(false)}
          >
            <div 
              className="bg-gray-900 rounded-xl w-full sm:max-w-2xl max-h-[80vh] overflow-y-auto border border-gray-600"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="sticky top-0 bg-gray-900 p-6 border-b border-gray-600 flex items-center justify-between">
                <h2 className="text-2xl font-bold text-white">{mt('aboutHoro')}</h2>
                <button 
                  onClick={() => setShowAbout(false)}
                  className="text-gray-400 hover:text-white text-2xl"
                >
                  √ó
                </button>
              </div>
              
              <div className="p-6 space-y-6 text-gray-100">
                <div>
                  <h3 className="text-xl font-bold text-yellow-400 mb-3">{mt('whatIsHoro')}</h3>
                  <p className="leading-relaxed whitespace-pre-line">{mt('whatIsHoroText')}</p>
                </div>

                <div>
                  <h3 className="text-xl font-bold text-yellow-400 mb-3">{mt('whereIsHoro')}</h3>
                  <p className="leading-relaxed">{mt('whereIsHoroText')}</p>
                </div>

                <div>
                  <h3 className="text-xl font-bold text-yellow-400 mb-3">{mt('whenIsHoro')}</h3>
                  <div className="leading-relaxed whitespace-pre-line">{mt('whenIsHoroText')}</div>
                </div>

                <div>
                  <h3 className="text-xl font-bold text-yellow-400 mb-3">{mt('whyHoro')}</h3>
                  <p className="leading-relaxed">{mt('whyHoroText')}</p>
                </div>

                <div>
                  <h3 className="text-xl font-bold text-yellow-400 mb-3">{mt('whatsNext')}</h3>
                  <p className="leading-relaxed">{mt('whatsNextText')}</p>
                </div>

                <div className="bg-blue-900/30 p-4 rounded-lg border border-blue-400/30">
                  <h4 className="font-semibold text-blue-300 mb-2">{mt('contractAddress')}</h4>
                  <div className="font-mono text-xs text-blue-200 break-all bg-black/30 p-2 rounded">
                    {PACKAGE_ID}
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Tokenomics Modal */}
        {showTokenomics && (
          <div 
            className="fixed inset-0 bg-black/80 flex items-center justify-center p-4"
            style={{ zIndex: 99999 }}
            onClick={() => setShowTokenomics(false)}
          >
            <div 
              className="bg-gray-900 rounded-xl w-full sm:max-w-2xl max-h-[80vh] overflow-y-auto border border-gray-600"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="sticky top-0 bg-gray-900 p-6 border-b border-gray-600 flex items-center justify-between">
                <h2 className="text-2xl font-bold text-white">{mt('tokenomics')}</h2>
                <button 
                  onClick={() => setShowTokenomics(false)}
                  className="text-gray-400 hover:text-white text-2xl"
                >
                  √ó
                </button>
              </div>
              
              <div className="p-6 space-y-6 text-gray-100">
                <div className="text-center">
                  <h3 className="text-xl font-bold text-yellow-400 mb-2">{mt('totalSupplyTitle')}</h3>
                  <h4 className="text-2xl font-bold text-white mb-2">{mt('totalSupply')}</h4>
                  <p className="text-green-400 font-semibold">{mt('fixedSupply')}</p>
                </div>

                <div>
                  <h3 className="text-xl font-bold text-yellow-400 mb-4">{mt('allocationBreakdown')}</h3>
                  <div className="space-y-3">
                    <div className="bg-purple-900/30 p-4 rounded-lg border border-purple-400/30">
                      <div className="flex justify-between items-center">
                        <div>
                          <div className="font-semibold text-purple-300">{mt('dailyClaims')}</div>
                          <div className="text-xs text-gray-400">{language === 'zh' ? '10‰∏á‰∫ø' : language === 'zh-TR' ? '10ÂÖÜ' : language === 'ru' ? '10—Ç—Ä–ª–Ω' : '10T'} tokens</div>
                        </div>
                        <div className="text-2xl font-bold text-purple-300">100%</div>
                      </div>
                    </div>
                    
                  </div>
                  
                </div>

                <div className="bg-blue-900/30 p-4 rounded-lg border border-blue-400/30">
                  <h4 className="font-semibold text-blue-300 mb-2">{mt('contractAddress')}</h4>
                  <div className="font-mono text-xs text-blue-200 break-all bg-black/30 p-2 rounded">
                    {PACKAGE_ID}
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Help Modal */}
        {showHelp && (
          <div 
            className="fixed inset-0 bg-black/80 flex items-center justify-center p-4"
            style={{ zIndex: 99999 }}
            onClick={() => setShowHelp(false)}
          >
            <div 
              className="bg-gray-900 rounded-xl w-full sm:max-w-2xl max-h-[80vh] overflow-y-auto border border-gray-600"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="sticky top-0 bg-gray-900 p-6 border-b border-gray-600 flex items-center justify-between">
                <h2 className="text-2xl font-bold text-white">{mt('helpTitle')}</h2>
                <button 
                  onClick={() => setShowHelp(false)}
                  className="text-gray-400 hover:text-white text-2xl"
                >
                  √ó
                </button>
              </div>
              
              <div className="p-6 space-y-6 text-gray-100">
                <div>
                  <h3 className="text-xl font-bold text-blue-400 mb-3">{mt('switchToTestnet')}</h3>
                  <p className="leading-relaxed whitespace-pre-line">{mt('switchToTestnetText')}</p>
                </div>

                <div>
                  <h3 className="text-xl font-bold text-green-400 mb-3">{mt('needTestnetSui')}</h3>
                  <p className="leading-relaxed whitespace-pre-line">{mt('needTestnetSuiText')}</p>
                </div>

                <div>
                  <h3 className="text-xl font-bold text-yellow-400 mb-3">{mt('troubleshooting')}</h3>
                  <p className="leading-relaxed whitespace-pre-line">{mt('troubleshootingText')}</p>
                </div>
              </div>
            </div>
          </div>
        )}
      </>
    );
  }

  // Main horoscope view
  return (
    <>
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 text-white">
        <div className="container mx-auto px-4 py-8">
          <div className="text-center mb-8">
            <div className="flex items-center justify-center mb-4">
              <Star className="h-12 w-12 text-yellow-400 mr-3" />
              <h1 className="text-3xl sm:text-4xl font-bold bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent">
                {t('dailyHoro')}
              </h1>
            </div>

          </div>

          <div className="max-w-2xl mx-auto space-y-6">
            {/* Auto-claiming progress */}
            {autoSigningProgress && (
              <div className="bg-blue-900/50 rounded-xl p-4 text-center">
                <p className="text-blue-300">Claiming today's $HORO tokens... ‚ú®</p>
              </div>
            )}

            {/* Blockchain verification progress */}
            {isVerifyingClaim && (
              <div className="bg-yellow-900/50 rounded-xl p-4 text-center">
                <div className="flex items-center justify-center space-x-2">
                  <LoadingSpinner size="h-4 w-4" />
                  <p className="text-yellow-300">{t('verifyingClaim')}</p>
                </div>
              </div>
            )}

            <div className="flex justify-center">
              <CustomConnectButton t={t} />
            </div>

            {/* Today's horoscope */}
            <div className="bg-gray-800 rounded-xl p-4 sm:p-8">
              <div className="flex flex-col sm:flex-row items-center justify-between mb-6">
                <h2 className="text-xl sm:text-2xl font-bold capitalize">{t(selectedSign)} {t('dailyReading')} {getZodiacSymbol()}</h2>
                <h2 className="text-xl sm:text-2xl">{formatCurrentDate()}</h2>
              </div>
              
              <div className="space-y-6">
                <p className="text-base sm:text-xl leading-relaxed text-gray-100">
                  {getCurrentHoroscope()}
                </p>
              </div>
            </div>

            {/* Wallet connection prompt */}
            {!currentAccount && (
              <div className="bg-blue-900/30 rounded-xl p-4 sm:p-8 border border-blue-400/30 text-center">
                <div className="space-y-4">
                  <div className="text-4xl">üíß</div>
                  <h3 className="text-lg sm:text-xl font-bold text-blue-300">Connect Your Wallet</h3>
                  <p className="text-blue-300 text-sm sm:text-base">
                    {t('connectSuietPrompt')}
                  </p>
                  <div className="flex justify-center">
                    <CustomConnectButton t={t} />
                  </div>
                  <div className="text-sm text-blue-400 mt-4">
                    <h4>{t('testnetDisclaimer')}</h4>
                    <p className="text-xs mt-1">{t('testnetExplainer')}</p>
                  </div>
                </div>
              </div>
            )}

            {/* Progress indicator with proper blockchain data representation */}
            {currentAccount && (
              <div className="bg-gray-800 rounded-xl p-4 sm:p-6">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-lg sm:text-xl font-bold">{t('weeklyProgress')}</h2>
                  <div className="text-right">
                    <p className="text-xl sm:text-2xl font-bold text-yellow-400">{getCurrentDayOfWeek() + 1}/7</p>
                  </div>
                </div>
                
                <div className="flex space-x-2 mb-8 mt-2">
                  {[...Array(7)].map((_, i) => {
                    // i represents day of week: 0=Sunday, 1=Monday, etc.
                    const isToday = i === getCurrentDayOfWeek();
                    const isPastDay = i < getCurrentDayOfWeek();
                    const isFutureDay = i > getCurrentDayOfWeek();
                    
                    // Check blockchain data for this day
                    const dayProgress = weeklyProgressByDay[i];
                    const isTodayCompletedFlag = isToday && (blockchainClaimStatus === 'claimed' || !!dayProgress);
                    
                    let bgColor, label, topText, topTextColor;
                    
                    if (dayProgress) {
                      // Day was claimed - show amount earned from blockchain
                      bgColor = 'bg-green-500';
                      label = '‚úì';
                      topText = `+${dayProgress.dailyReward}`;
                      topTextColor = 'text-green-400';
                    } else if (isTodayCompletedFlag) {
                      // Today was claimed - show estimated amount
                      bgColor = 'bg-green-500';
                      label = '‚úì';
                      topText = todaysClaimAmount > 0 ? `+${todaysClaimAmount}` : '+10';
                      topTextColor = 'text-green-400';
                    } else if (isPastDay) {
                      // Missed day
                      bgColor = 'bg-red-500';
                      label = '‚úó';
                      topText = '+0';
                      topTextColor = 'text-red-400';
                    } else if (isToday && blockchainClaimStatus === 'not_claimed') {
                      // Today, ready to claim
                      bgColor = 'bg-yellow-500 animate-pulse';
                      label = '!';
                      topText = 'Today';
                      topTextColor = 'text-green-400';
                    } else if (isToday) {
                      // Today, checking status
                      bgColor = 'bg-yellow-600';
                      label = '?';
                      topText = 'Today';
                      topTextColor = 'text-yellow-400';
                    } else {
                      // Future days
                      bgColor = 'bg-gray-600';
                      label = '';
                      topText = '‚≠ê';
                      topTextColor = 'text-yellow-200';
                    }
                    
                    return (
                      <div key={i} className="flex-1 relative py-2">
                        {/* Top text showing earnings or status */}
                        {topText && (
                          <div className={`absolute -top-4 left-1/2 transform -translate-x-1/2 text-xs ${topTextColor} whitespace-nowrap font-semibold`}>
                            {topText}
                          </div>
                        )}
                        
                        {/* Day indicator bar */}
                        <div
                          className={`h-4 rounded-full ${bgColor} flex items-center justify-center`}
                          title={`${getDayName(i)}${dayProgress ? ` - Earned ${dayProgress.dailyReward} $HORO` : isTodayCompletedFlag ? ` - Earned ${todaysClaimAmount || 10} $HORO` : isPastDay ? ' - Missed (+0 $HORO)' : isToday ? ' - Today' : ' - Future'}`}
                        >
                          {label && (
                            <span className="text-white text-xs font-bold">{label}</span>
                          )}
                        </div>
                        
                        {/* Day label underneath */}
                        <div className={`absolute -bottom-4 left-1/2 transform -translate-x-1/2 text-xs whitespace-nowrap ${
                          isToday ? 'text-green-400 font-semibold' : 'text-gray-400'
                        }`}>
                          {getDayName(i).slice(0, 3)}
                        </div>
                      </div>
                    );
                  })}
                </div>
                
                {/* Progress Legend */}
                <div className="flex flex-wrap justify-center gap-2 sm:gap-4 text-xs mb-4">
                  <div className="flex items-center space-x-1">
                    <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                    <span className="text-green-400">{t('completed')}</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                    <span className="text-red-400">{t('missed')}</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
                    <span className="text-yellow-400">{t('available')}</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <div className="w-3 h-3 bg-gray-600 rounded-full"></div>
                    <span className="text-gray-400">{t('future')}</span>
                  </div>
                </div>
                
                {/* Claim status UI */}
                {currentAccount && signAndExecuteTransaction ? (
                  <div className="mt-2 space-y-2">
                    {(() => {
                      const hasAlreadyClaimed = isTodayCompleted();
                      const isCheckingStatus = isVerifyingClaim && blockchainClaimStatus === 'checking';
                      const isCurrentlyClaiming = autoSigningProgress;
                      
                      if (hasAlreadyClaimed) {
                        return (
                          <>
                            <button
                              disabled={true}
                              className="bg-gray-600 text-gray-300 px-4 py-2 rounded-lg text-sm flex items-center space-x-2 w-full justify-center cursor-not-allowed"
                            >
                              <span>‚úÖ {todaysClaimAmount > 0 ? t('claimedAmountToday', { amount: todaysClaimAmount }) : t('alreadyClaimedToday')}</span>
                            </button>
                            <div className="text-center space-y-1">
                              <p className="text-green-400 text-sm">{t('alreadyClaimedMessage')}</p>
                              <p className="text-gray-400 text-xs">{t('nextClaimAvailable')}</p>
                            </div>
                          </>
                        );
                      } else if (isCheckingStatus) {
                        return (
                          <>
                            <button
                              disabled={true}
                              className="bg-gray-600 text-gray-300 px-4 py-2 rounded-lg text-sm flex items-center space-x-2 w-full justify-center"
                            >
                              <LoadingSpinner size="h-4 w-4" />
                              <span>{t('verifyingClaim')}</span>
                            </button>
                            <p className="text-xs text-gray-400 text-center">
                              Checking blockchain status...
                            </p>
                          </>
                        );
                      } else {
                        return (
                          <>
                            <button
                              onClick={() => claimTodaysHoro(selectedSign)}
                              disabled={isCurrentlyClaiming}
                              className="bg-green-600 hover:bg-green-700 disabled:opacity-50 text-white px-4 py-2 rounded-lg text-sm transition-colors flex items-center space-x-2 w-full justify-center"
                            >
                              {isCurrentlyClaiming ? (
                                <>
                                  <LoadingSpinner size="h-4 w-4" />
                                  <span>{t('claiming')}</span>
                                </>
                              ) : (
                                <span>{t('claimTodaysHoro')}</span>
                              )}
                            </button>
                            <p className="text-xs text-gray-400 text-center">
                              Click to claim your daily $HORO tokens (protected by smart contract)
                            </p>
                          </>
                        );
                      }
                    })()}
                  </div>
                ) : currentAccount ? (
                  <p className="text-red-400 text-sm mt-2">
                    {t('useSuietForSigning')}
                  </p>
                ) : null}
                
                {currentAccount?.address && (
                  <div className="mt-3 space-y-2">
                    <p className="text-gray-400 text-xs">
                      {t('wallet')}: {currentAccount.address.slice(0, 8)}...{currentAccount.address.slice(-6)}
                    </p>
                    <GasManager currentAccount={currentAccount} suiClient={suiClient} t={t} />
                  </div>
                )}
              </div>
            )}
          </div>
          
          <div className="text-center mt-12 mb-8">
            <div className="flex flex-wrap justify-center gap-4 sm:gap-6 text-gray-400">
              <button 
                onClick={() => setShowAbout(true)}
                className="hover:text-yellow-400 transition-colors text-sm font-medium cursor-pointer"
              >
                {t('about')}
              </button>
              <button 
                onClick={() => setShowTokenomics(true)}
                className="hover:text-yellow-400 transition-colors text-sm font-medium cursor-pointer"
              >
                {t('tokenomics')}
              </button>
              <button 
                onClick={() => setShowHelp(true)}
                className="hover:text-yellow-400 transition-colors text-sm font-medium cursor-pointer"
              >
                {t('help')}
              </button>
              <LanguageSelector 
                currentLanguage={language} 
                onLanguageChange={handleLanguageChange}
                textColor="text-gray-400"
              />
              <button 
                onClick={() => {
                  localStorage.clear();
                  window.location.reload();
                }}
                className="hover:text-red-400 transition-colors text-sm font-medium cursor-pointer"
              >
                {t('reset')}
              </button>
            </div>
          </div>

          {/* SVAC Static Logo - Centered below footer */}
          <div className="flex justify-center items-center mt-8">
            <div className="text-gray-500">
              {/* <StaticLogo size="small" /> */}
            </div>
          </div>
        </div>
      </div>

      {/* About Modal */}
      {showAbout && (
        <div 
          className="fixed inset-0 bg-black/80 flex items-center justify-center p-4"
          style={{ zIndex: 99999 }}
          onClick={() => setShowAbout(false)}
        >
          <div 
            className="bg-gray-900 rounded-xl w-full sm:max-w-2xl max-h-[80vh] overflow-y-auto border border-gray-600"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="sticky top-0 bg-gray-900 p-6 border-b border-gray-600 flex items-center justify-between">
              <h2 className="text-2xl font-bold text-white">{mt('aboutHoro')}</h2>
              <button 
                onClick={() => setShowAbout(false)}
                className="text-gray-400 hover:text-white text-2xl"
              >
                √ó
              </button>
            </div>
            
            <div className="p-6 space-y-6 text-gray-100">
              <div>
                <h3 className="text-xl font-bold text-yellow-400 mb-3">{mt('whatIsHoro')}</h3>
                <p className="leading-relaxed whitespace-pre-line">{mt('whatIsHoroText')}</p>
              </div>

              <div>
                <h3 className="text-xl font-bold text-yellow-400 mb-3">{mt('whereIsHoro')}</h3>
                <p className="leading-relaxed">{mt('whereIsHoroText')}</p>
              </div>

              <div>
                <h3 className="text-xl font-bold text-yellow-400 mb-3">{mt('whenIsHoro')}</h3>
                <div className="leading-relaxed whitespace-pre-line">{mt('whenIsHoroText')}</div>
              </div>

              <div>
                <h3 className="text-xl font-bold text-yellow-400 mb-3">{mt('whyHoro')}</h3>
                <p className="leading-relaxed">{mt('whyHoroText')}</p>
              </div>

              <div>
                <h3 className="text-xl font-bold text-yellow-400 mb-3">{mt('whatsNext')}</h3>
                <p className="leading-relaxed">{mt('whatsNextText')}</p>
              </div>

              <div className="bg-blue-900/30 p-4 rounded-lg border border-blue-400/30">
                <h4 className="font-semibold text-blue-300 mb-2">{mt('contractAddress')}</h4>
                <div className="font-mono text-xs text-blue-200 break-all bg-black/30 p-2 rounded">
                  {PACKAGE_ID}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Tokenomics Modal */}
      {showTokenomics && (
        <div 
          className="fixed inset-0 bg-black/80 flex items-center justify-center p-4"
          style={{ zIndex: 99999 }}
          onClick={() => setShowTokenomics(false)}
        >
          <div 
            className="bg-gray-900 rounded-xl w-full sm:max-w-2xl max-h-[80vh] overflow-y-auto border border-gray-600"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="sticky top-0 bg-gray-900 p-6 border-b border-gray-600 flex items-center justify-between">
              <h2 className="text-2xl font-bold text-white">{mt('tokenomics')}</h2>
              <button 
                onClick={() => setShowTokenomics(false)}
                className="text-gray-400 hover:text-white text-2xl"
              >
                √ó
              </button>
            </div>
            
            <div className="p-6 space-y-6 text-gray-100">
              <div className="text-center">
                <h3 className="text-xl font-bold text-yellow-400 mb-2">{mt('totalSupplyTitle')}</h3>
                <h4 className="text-2xl font-bold text-white mb-2">{mt('totalSupply')}</h4>
                <p className="text-green-400 font-semibold">{mt('fixedSupply')}</p>
              </div>

              <div>
                <h3 className="text-xl font-bold text-yellow-400 mb-4">{mt('allocationBreakdown')}</h3>
                <div className="space-y-3">
                  <div className="bg-purple-900/30 p-4 rounded-lg border border-purple-400/30">
                    <div className="flex justify-between items-center">
                      <div>
                        <div className="font-semibold text-purple-300">{mt('dailyClaims')}</div>
                        <div className="text-xs text-gray-400">{language === 'zh' ? '10‰∏á‰∫ø' : language === 'zh-TR' ? '10ÂÖÜ' : language === 'ru' ? '10—Ç—Ä–ª–Ω' : '10T'} tokens</div>
                      </div>
                      <div className="text-2xl font-bold text-purple-300">100%</div>
                    </div>
                  </div>
                  
                </div>
                
              </div>

              <div className="bg-blue-900/30 p-4 rounded-lg border border-blue-400/30">
                <h4 className="font-semibold text-blue-300 mb-2">{mt('contractAddress')}</h4>
                <div className="font-mono text-xs text-blue-200 break-all bg-black/30 p-2 rounded">
                  {PACKAGE_ID}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Help Modal */}
      {showHelp && (
        <div 
          className="fixed inset-0 bg-black/80 flex items-center justify-center p-4"
          style={{ zIndex: 99999 }}
          onClick={() => setShowHelp(false)}
        >
          <div 
            className="bg-gray-900 rounded-xl w-full sm:max-w-2xl max-h-[80vh] overflow-y-auto border border-gray-600"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="sticky top-0 bg-gray-900 p-6 border-b border-gray-600 flex items-center justify-between">
              <h2 className="text-2xl font-bold text-white">{mt('helpTitle')}</h2>
              <button 
                onClick={() => setShowHelp(false)}
                className="text-gray-400 hover:text-white text-2xl"
              >
                √ó
              </button>
            </div>
            
            <div className="p-6 space-y-6 text-gray-100">
              <div>
                <h3 className="text-xl font-bold text-blue-400 mb-3">{mt('switchToTestnet')}</h3>
                <p className="leading-relaxed whitespace-pre-line">{mt('switchToTestnetText')}</p>
              </div>

              <div>
                <h3 className="text-xl font-bold text-green-400 mb-3">{mt('needTestnetSui')}</h3>
                <p className="leading-relaxed whitespace-pre-line">{mt('needTestnetSuiText')}</p>
              </div>

              <div>
                <h3 className="text-xl font-bold text-yellow-400 mb-3">{mt('troubleshooting')}</h3>
                <p className="leading-relaxed whitespace-pre-line">{mt('troubleshootingText')}</p>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
}

// Wrapper component with WalletProvider
export default function HoroAppWithWallet() {
  return (
    <ErrorBoundary>
      <QueryClientProvider client={queryClient}>
        <SuiClientProvider networks={networkConfig} defaultNetwork="testnet">
          <WalletProvider>
            <HoroApp />
          </WalletProvider>
        </SuiClientProvider>
      </QueryClientProvider>
    </ErrorBoundary>
  );
}
